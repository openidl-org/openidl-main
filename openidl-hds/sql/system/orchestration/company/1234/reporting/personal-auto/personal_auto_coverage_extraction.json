{"map":"\n \n    DROP TABLE IF EXISTS openidl_ep_1234.tmp_au_coverage;\n    DROP TABLE IF EXISTS openidl_ep_1234.tmp_au_coverage_ref;\n    DROP TABLE IF EXISTS openidl_ep_1234.tmp_pre_au_coverage;\n    DROP TABLE IF EXISTS openidl_ep_1234.tmp_au_pc;\n    \n    DROP FUNCTION IF EXISTS openidl_ep_1234.tmp_car_years;\n    DROP FUNCTION IF EXISTS openidl_ep_1234.tmp_earned_premium;\n    DROP FUNCTION IF EXISTS openidl_ep_1234.tmp_incurred_loss;\n    DROP FUNCTION IF EXISTS openidl_ep_1234.tmp_incurred_count;\n    DROP FUNCTION IF EXISTS openidl_ep_1234.tmp_auto_outstanding;\n    \n     \n    create table openidl_ep_1234.tmp_au_pc as\n    (select a.accounting_date, a.transaction_code, a.accounting_term_expiration, a.exposure, a.monthly_premium_amount\n    , null as occurrence_identifier, null as accident_date, null as loss_amount, a.deductible_amount, a.deductible_code, a.coverage_code\n    from openidl_base_1234.personal_auto_policy a)\n    union all\n    (select b.accounting_date::date, b.transaction_code, null as accounting_term_expiration, null as exposure, null as monthly_premium_amount,\n    b.occurrence_identifier, b.accident_date, b.loss_amount, b.deductible_amount, b.deductible_code, b.coverage_code\n    from openidl_base_1234.personal_auto_claim b);\n    \n     \n    create table openidl_ep_1234.tmp_au_coverage as\n    select \n           case when a.coverage_code = '1' then '1'\n                  when a.coverage_code = '2' then '2'\n                  when a.coverage_code = '3' then '3'\n                  when a.coverage_code = '4' then '4'\n                  when a.coverage_code = '5' then '5'\n                  when a.coverage_code = '6' then '6'\n                  when a.coverage_code = 'X' then '6'\n                  when a.coverage_code = 'Y' then '6'\n                  when a.coverage_code = '7' and a.deductible_code in ('0') then '7'\n                  when a.coverage_code = '8' and a.deductible_code in ('0') then '8'\n                  when a.coverage_code = 'T' and a.deductible_code in ('0') then '8'\n                  when a.coverage_code = '7' and a.deductible_code in ('2') then '9'\n                  when a.coverage_code = '8' and a.deductible_code in ('2') then '10'\n                  when a.coverage_code = 'T' and a.deductible_code in ('2') then '10'\n                  when a.coverage_code = '7' and a.deductible_code in ('4') then '11'\n                  when a.coverage_code = '8' and a.deductible_code in ('4') then '12'\n                  when a.coverage_code = 'T' and a.deductible_code in ('4') then '12'\n                  when a.coverage_code = '7' and a.deductible_code in ('5') then '13'\n                  when a.coverage_code = '8' and a.deductible_code in ('5') then '14'\n                  when a.coverage_code = 'T' and a.deductible_code in ('5') then '14'\n                  when a.coverage_code = '7' and a.deductible_code in ('6') then '15'\n                  when a.coverage_code = '8' and a.deductible_code in ('6') then '16'\n                  when a.coverage_code = 'T' and a.deductible_code in ('6') then '16'\n                  when a.coverage_code = '7' and a.deductible_code not in ('0', '2', '4', '5', '6') then '17'\n                  when a.coverage_code = '8' and a.deductible_code not in ('0', '2', '4', '5', '6') then '18'\n                  when a.coverage_code = 'T' and a.deductible_code not in ('0', '2', '4', '5', '6') then '18'              \n                  when a.coverage_code = '9' then '1'\n                  else null end as reporting_code,\n                  case when a.coverage_code = '1' then 'Bodily Injury'\n                  when a.coverage_code = '2' then 'Property Damage'\n                  when a.coverage_code = '3' then 'Single BI/PD Limit'\n                  when a.coverage_code = '4' then 'PIP'\n                  when a.coverage_code = '5' then 'Medical Payments'\n                  when a.coverage_code = '6' then 'Uninsured/underinsured'\n                  when a.coverage_code = 'X' then 'Uninsured/underinsured'\n                  when a.coverage_code = 'Y' then 'Uninsured/underinsured'\n                  when a.coverage_code = '7' and a.deductible_code in ('0') then 'Phy Dam - Coll - FULL'\n                  when a.coverage_code = '8' and a.deductible_code in ('0') then 'Phy Dam - Comp - FULL'\n                  when a.coverage_code = 'T' and a.deductible_code in ('0') then 'Phy Dam - Comp - FULL'\n                  when a.coverage_code = '7' and a.deductible_code in ('2') then 'Phy Dam - Coll - $100'\n                  when a.coverage_code = '8' and a.deductible_code in ('2') then 'Phy Dam - Comp - $100'\n                  when a.coverage_code = 'T' and a.deductible_code in ('2') then 'Phy Dam - Comp - $100'\n                  when a.coverage_code = '7' and a.deductible_code in ('4') then 'Phy Dam - Coll - $250'\n                  when a.coverage_code = '8' and a.deductible_code in ('4') then 'Phy Dam - Comp - $250'\n                  when a.coverage_code = 'T' and a.deductible_code in ('4') then 'Phy Dam - Comp - $250'\n                  when a.coverage_code = '7' and a.deductible_code in ('5') then 'Phy Dam - Coll - $500'\n                  when a.coverage_code = '8' and a.deductible_code in ('5') then 'Phy Dam - Comp - $500'\n                  when a.coverage_code = 'T' and a.deductible_code in ('5') then 'Phy Dam - Comp - $500'\n                  when a.coverage_code = '7' and a.deductible_code in ('6') then 'Phy Dam - Coll - $1000'\n                  when a.coverage_code = '8' and a.deductible_code in ('6') then 'Phy Dam - Comp - $1000'\n                  when a.coverage_code = 'T' and a.deductible_code in ('6') then 'Phy Dam - Comp - $1000'\n                  when a.coverage_code = '7' and a.deductible_code not in ('0', '2', '4', '5', '6') then 'Phy Dam - Coll - ALL OTHER'\n                  when a.coverage_code = '8' and a.deductible_code not in ('0', '2', '4', '5', '6') then 'Phy Dam - Comp - ALL OTHER'\n                  when a.coverage_code = 'T' and a.deductible_code not in ('0', '2', '4', '5', '6') then 'Phy Dam - Comp - ALL OTHER'              \n                  when a.coverage_code = '9' then 'Bodily Injury'\n                  else null end as reporting_name,\n                  a.*\n    from openidl_ep_1234.tmp_au_pc a;\n    \n     \n    create table openidl_ep_1234.tmp_au_coverage_ref as\n    select reporting_code, reporting_name \n    from openidl_ep_1234.tmp_au_coverage \n    group by reporting_code, reporting_name \n    order by reporting_code::numeric ;\n    \n     \nCREATE OR replace FUNCTION openidl_ep_1234.tmp_car_years(IN start_date date,IN end_date date, IN pv_reporting_code VARCHAR)\nreturns      numeric AS $$DECLARE cy numeric;\nBEGIN\n    select sum(a.cy)\n    from (\n        (SELECT 1 ggroup,            \n            Datediff(accounting_date,accounting_term_expiration )/12*exposure cy\n            FROM   openidl_ep_1234.tmp_au_coverage\n            WHERE  accounting_date >= start_date\n            AND accounting_term_expiration < end_date\n            and transaction_code = '1'\n            and reporting_code = pv_reporting_code) \n        union all\n            (SELECT 2 ggroup,                                                                \n            Datediff(start_date, accounting_term_expiration)/12*exposure cy\n            FROM   openidl_ep_1234.tmp_au_coverage\n            WHERE  accounting_date < start_date\n            and accounting_term_expiration> start_date\n            and accounting_term_expiration< end_date\n            and transaction_code = '1'\n            and reporting_code = pv_reporting_code)\n        union all\n            (select 3 ggroup,\n            Datediff(accounting_date, end_date)/12*exposure cy\n            FROM   openidl_ep_1234.tmp_au_coverage\n            WHERE  accounting_date > start_date\n            and accounting_date < end_date\n            AND accounting_term_expiration > end_date\n            and transaction_code = '1'\n            and reporting_code = pv_reporting_code)\n        union all\n            (select 4 ggroup,       \n            Datediff(start_date,end_date)/12*exposure cy\n            FROM   openidl_ep_1234.tmp_au_coverage\n            WHERE  accounting_date < start_date\n            AND accounting_term_expiration > end_date\n            and transaction_code = '1'\n            and reporting_code = pv_reporting_code)\n            ) a into cy;\n    RETURN cy;\nEND$$ language plpgsql;\n\n \n    CREATE OR replace FUNCTION openidl_ep_1234.tmp_au_earned_premium(IN start_date date,IN end_date date, IN pv_reporting_code VARCHAR)\n    returns      numeric AS $$DECLARE ep numeric;\n    BEGIN\n        select sum(a.ep)\n        from (\n            (SELECT 1 ggroup,\n                Datediff(accounting_date,accounting_term_expiration) * monthly_premium_amount ep\n                FROM   openidl_ep_1234.tmp_au_coverage\n                WHERE  accounting_date >= start_date\n                AND accounting_term_expiration < end_date\n                and transaction_code = '1'\n                and reporting_code = pv_reporting_code) \n            union all \n                (SELECT 2 ggroup,                                                      \n                Datediff(accounting_date, end_date) * monthly_premium_amount  ep   \n                FROM   openidl_ep_1234.tmp_au_coverage\n                WHERE  accounting_date < start_date\n                and accounting_term_expiration> start_date\n                and accounting_term_expiration< end_date\n                and transaction_code = '1'\n                and reporting_code = pv_reporting_code\n                )\n            union all \n                (select 3 ggroup,\n                Datediff(accounting_date, end_date) * monthly_premium_amount ep\n                FROM   openidl_ep_1234.tmp_au_coverage\n                WHERE  accounting_date > start_date\n                and accounting_date < end_date\n                AND accounting_term_expiration > end_date\n                and transaction_code = '1'\n                and reporting_code = pv_reporting_code)\n            union all\n                (select 4 ggroup,       \n                Datediff(start_date, end_date) *monthly_premium_amount ep\n                FROM   openidl_ep_1234.tmp_au_coverage\n                WHERE  accounting_date < start_date\n                AND accounting_term_expiration > end_date\n                and transaction_code = '1'\n                and reporting_code = pv_reporting_code)) a into ep;\n        RETURN ep;\n    END$$ language plpgsql;\n    \n     \n    CREATE OR replace FUNCTION openidl_ep_1234.tmp_auto_outstanding(IN start_date date,IN end_date date, IN pv_coverage_code VARCHAR)\n    returns      numeric AS $$DECLARE ep numeric;\n    BEGIN\n        \n        SELECT Sum(x.loss_amount) outstanding_loss\n            FROM  (SELECT t2.coverage_code,\n                        t2.occurrence_identifier,\n                        Max(t2.loss_amount) loss_amount\n                FROM   (SELECT coverage_code,\n                                occurrence_identifier,\n                                Max(accounting_date) accounting_date\n                        FROM   openidl_ep_1234.tmp_au_coverage\n                        WHERE  transaction_code = '3'\n                        and coverage_code = pv_coverage_code\n                        and accident_date > start_date\n                        and accident_date < end_date\n                        GROUP  BY coverage_code,\n                                    occurrence_identifier) t,\n                        openidl_ep_1234.tmp_au_coverage t2\n                WHERE  t.coverage_code = t2.coverage_code\n                        AND t.occurrence_identifier = t2.occurrence_identifier\n                        AND t.accounting_date = t2.accounting_date\n                GROUP  BY t2.coverage_code,\n                            t2.occurrence_identifier,\n                            t2.accounting_date) x into ep; \n        RETURN ep;\n    END$$ language plpgsql;\n    \n     \n    CREATE OR replace FUNCTION openidl_ep_1234.tmp_au_incurred_loss(IN start_date date,IN end_date date, IN  pv_reporting_code VARCHAR)\n    returns      numeric AS $$DECLARE ep numeric;\n    BEGIN\n        \n        select sum(loss_amount) loss_amount\n            from \n            ((select sum(loss_amount) loss_amount from openidl_ep_1234.tmp_au_coverage\n            where transaction_code = '2'\n            and reporting_code =  pv_reporting_code\n            and accident_date > start_date\n            and accident_date < end_date\n            union\n            (select openidl_ep_1234.tmp_auto_outstanding(start_date, end_date,'1') loss_amount))) a into ep; \n        RETURN ep;\n    END$$ language plpgsql;\n    \n     \n    CREATE OR replace FUNCTION openidl_ep_1234.tmp_au_incurred_count(IN start_date date,IN end_date date, IN pv_reporting_code VARCHAR)\n    returns      numeric AS $$DECLARE ep numeric;\n    BEGIN\n        select count(distinct(occurrence_identifier)) incurred_count \n        from openidl_ep_1234.tmp_au_coverage\n        where transaction_code in ('2','3','6','7')\n        and reporting_code = pv_reporting_code\n        and accident_date > start_date\n        and accident_date < end_date into ep;\n        RETURN ep;\n    END$$ language plpgsql;\n    \n    ","reduce":"\n    select *, round(openidl_ep_1234.tmp_au_earned_premium('2000-01-01'::DATE, '2002-01-01'::DATE,a.reporting_code)) earned_premium \n    ,round(openidl_ep_1234.tmp_car_years('2000-01-01'::DATE, '2002-01-01'::DATE,a.reporting_code)) car_years\n    ,round(openidl_ep_1234.tmp_au_incurred_count('2000-01-01'::DATE, '2002-01-01'::DATE,a.reporting_code)) incurred_count\n    ,round(openidl_ep_1234.tmp_au_incurred_loss('2000-01-01'::DATE, '2002-01-01'::DATE,a.reporting_code)) incurred_loss\n    from openidl_ep_1234.tmp_au_coverage_ref a; \n    \n    ","clean":"\n \n    DROP TABLE IF EXISTS openidl_ep_1234.tmp_au_coverage;\n    DROP TABLE IF EXISTS openidl_ep_1234.tmp_au_coverage_ref;\n    DROP TABLE IF EXISTS openidl_ep_1234.tmp_pre_au_coverage;\n    DROP TABLE IF EXISTS openidl_ep_1234.tmp_au_pc;\n    \n    DROP FUNCTION IF EXISTS openidl_ep_1234.tmp_car_years;\n    DROP FUNCTION IF EXISTS openidl_ep_1234.tmp_earned_premium;\n    DROP FUNCTION IF EXISTS openidl_ep_1234.tmp_incurred_loss;\n    DROP FUNCTION IF EXISTS openidl_ep_1234.tmp_incurred_count;\n    DROP FUNCTION IF EXISTS openidl_ep_1234.tmp_auto_outstanding;\n    \n    "}