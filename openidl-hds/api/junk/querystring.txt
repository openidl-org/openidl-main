"\n \n    DROP TABLE  openidl_ep_9999.tmp_ho_pc;\n    DROP TABLE  openidl_ep_9999.tmp_ho_reporting_ref;\n    \n    DROP FUNCTION IF EXISTS openidl_ep_9999.tmp_ho_earned_premium;\n    DROP FUNCTION IF EXISTS openidl_ep_9999.tmp_ho_incurred_loss;\n    DROP FUNCTION IF EXISTS openidl_ep_9999.tmp_ho_outstanding_loss;\n    DROP FUNCTION IF EXISTS openidl_ep_9999.tmp_ho_paid_loss;\n    DROP FUNCTION IF EXISTS openidl_ep_9999.tmp_ho_written_premium;\n    \n    |\n    CREATE TABLE openidl_ep_9999.tmp_ho_pc as\n    (SELECT reporting_category,\n            reporting_form,\n            policy_form,\n            transaction_code,\n            premium_amount,\n            monthly_premium_amount,\n            NULL AS loss_amount,\n            accounting_date,\n            accounting_term_expiration,\n            months_covered\n     FROM   openidl_base_9999.ho_policy a)\n     UNION  ALL\n    (SELECT reporting_category,\n            reporting_form,\n            policy_form,\n            transaction_code,\n            NULL AS premium_amount,\n            NULL AS monthly_premium_amount,\n            loss_amount,\n            accounting_date,\n            NULL AS accounting_term_expiration,\n            NULL AS months_covered\n     FROM   openidl_base_9999.ho_claim b);\n    \n    |\n    CREATE TABLE openidl_ep_9999.tmp_ho_reporting_ref as\n    SELECT reporting_category, reporting_form, policy_form\n    FROM openidl_ep_9999.tmp_ho_pc\n    GROUP BY reporting_category, reporting_form, policy_form;\n    |\n    CREATE OR replace FUNCTION openidl_ep_9999.tmp_ho_earned_premium(IN start_date date,IN end_date date, IN pv_policy_form VARCHAR)\n    returns      numeric AS $$DECLARE ep numeric;\n    BEGIN\n        select sum(a.ep)\n        from (\n            (SELECT 1 ggroup,\n                Datediff(accounting_term_expiration, accounting_date) * monthly_premium_amount ep\n                FROM   openidl_ep_9999.tmp_ho_pc\n                WHERE  accounting_date >= start_date\n                AND accounting_term_expiration < end_date\n                and transaction_code = '1'\n                and policy_form = pv_policy_form) \n            union all \n                (SELECT 2 ggroup,                                                      \n                Datediff(start_date, accounting_term_expiration) * monthly_premium_amount ep   \n                FROM   openidl_ep_9999.tmp_ho_pc\n                WHERE  accounting_date < start_date\n                and accounting_term_expiration> start_date\n                and accounting_term_expiration< end_date\n                and transaction_code = '1'\n                and policy_form = pv_policy_form)\n            union all \n                (select 3 ggroup,\n                Datediff(accounting_date, end_date) * monthly_premium_amount ep\n                FROM   openidl_ep_9999.tmp_ho_pc\n                WHERE  accounting_date > start_date\n                and accounting_date < end_date\n                AND accounting_term_expiration > end_date\n                and transaction_code = '1'\n                and policy_form = pv_policy_form)\n            union all\n                (select 4 ggroup,       \n                Datediff(start_date, end_date) * monthly_premium_amount ep\n                FROM   openidl_ep_9999.tmp_ho_pc\n                WHERE  accounting_date < start_date\n                AND accounting_term_expiration > end_date\n                and transaction_code = '1'\n                and policy_form = pv_policy_form)) a into ep;\n        RETURN ep;\n    END$$ language plpgsql;\n    \n    |\n    CREATE OR replace FUNCTION openidl_ep_9999.tmp_ho_written_premium(in pv_policy_form VARCHAR)\n    returns      numeric AS $$DECLARE pl numeric;\n    begin\n        SELECT sum(premium_amount) into pl\n        FROM   openidl_base_9999.ho_policy\n        where policy_form = pv_policy_form;\n    RETURN pl;\n    END$$ language plpgsql;\n    \n    |\n    CREATE OR replace FUNCTION openidl_ep_9999.tmp_ho_paid_loss(in pv_policy_form VARCHAR)\n    returns      numeric AS $$DECLARE pl numeric;\n    begin\n        SELECT sum(loss_amount) into pl\n        FROM   openidl_base_9999.ho_claim\n        where  transaction_code = '2'\n        and policy_form = pv_policy_form;\n    RETURN pl;\n    END$$ language plpgsql;\n    \n    |\n    CREATE OR replace FUNCTION openidl_ep_9999.tmp_ho_outstanding_loss(in pv_policy_form VARCHAR)\n    returns      numeric AS $$DECLARE pl numeric;\n    begin\n        SELECT sum(loss_amount) into pl\n        FROM   openidl_base_9999.ho_claim\n        where  transaction_code = '3'\n        and policy_form = pv_policy_form;\n    RETURN pl;\n    END$$ language plpgsql;\n    \n    |\n    CREATE OR replace FUNCTION openidl_ep_9999.tmp_ho_incurred_loss(in pv_policy_form VARCHAR)\n    returns      numeric AS $$DECLARE pl numeric;\n    begin\n        SELECT sum(openidl_ep_9999.tmp_ho_paid_loss(pv_policy_form) + openidl_ep_9999.tmp_ho_outstanding_loss(pv_policy_form)) into pl;\n    \n    RETURN pl;\n    END$$ language plpgsql;\n    \n    |\n    SELECT  reporting_category,\n\t\t\tpolicy_form,\n     \t    reporting_form,\n        \topenidl_ep_9999.Tmp_ho_written_premium(policy_form) written_premium,\n        \topenidl_ep_9999.Tmp_ho_paid_loss(policy_form) paid_loss,\n        \tround(openidl_ep_9999.Tmp_ho_paid_loss(policy_form) * 100 / openidl_ep_9999.Tmp_ho_written_premium(policy_form), 2) loss_ratio,\n        \topenidl_ep_9999.tmp_ho_earned_premium( '2002-08-15', '2003-08-15', policy_form) ep,\n        \topenidl_ep_9999.tmp_ho_incurred_loss(policy_form) incurred_loss,\n        \tround(openidl_ep_9999.tmp_ho_incurred_loss(policy_form) * 100 / openidl_ep_9999.tmp_ho_earned_premium( '2002-08-15', '2003-08-15', policy_form), 2) ep_loss_ratio\n    FROM \topenidl_ep_9999.tmp_ho_reporting_ref order by reporting_category,reporting_form;\n    "