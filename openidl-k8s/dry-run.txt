NAME: local-aais
LAST DEPLOYED: Sat Feb 27 22:35:11 2021
NAMESPACE: default
STATUS: pending-install
REVISION: 1
USER-SUPPLIED VALUES:
global:
  appsecret: apps-secret
  clusterurl: aais.test.io
  datacallapp:
    install: true
    port: 8080
    servicename: data-call-app-service
    targetport: 8080
  datacallprocessor:
    install: true
    port: 8080
    servicename: data-call-processor-service
    targetport: 8080
  etl:
    httpservicename: nifi-http-service
    install: false
    port: 8080
    servicename: nifi-service
    targetport: 8080
    zkcsservicename: zk-cs-service
    zkhsservicename: zk-hs-service
  hdsconfigmap: hds-configmap
  hdssecret: hds-secret
  insurancedatamanager:
    install: true
    port: 8080
    servicename: insurance-data-manager-service
    targetport: 8080
  mongodb:
    install: true
  mongoexpress:
    install: true
  ui:
    install: true
    servicename: ui-service
  upload:
    install: true
    port: 80
    servicename: upload-service
    targetport: 80

COMPUTED VALUES:
global:
  appsecret: apps-secret
  clusterurl: aais.test.io
  datacallapp:
    install: true
    port: 8080
    servicename: data-call-app-service
    targetport: 8080
  datacallprocessor:
    install: true
    port: 8080
    servicename: data-call-processor-service
    targetport: 8080
  etl:
    httpservicename: nifi-http-service
    install: false
    port: 8080
    servicename: nifi-service
    targetport: 8080
    zkcsservicename: zk-cs-service
    zkhsservicename: zk-hs-service
  hdsconfigmap: hds-configmap
  hdssecret: hds-secret
  insurancedatamanager:
    install: true
    port: 8080
    servicename: insurance-data-manager-service
    targetport: 8080
  mongodb:
    install: true
  mongoexpress:
    install: true
  ui:
    install: true
    servicename: ui-service
  upload:
    install: true
    port: 80
    servicename: upload-service
    targetport: 80
openidl-data-call-app:
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 100
    minReplicas: 1
    targetCPUUtilizationPercentage: 80
  fullnameOverride: ""
  global:
    appsecret: apps-secret
    clusterurl: aais.test.io
    datacallapp:
      install: true
      port: 8080
      servicename: data-call-app-service
      targetport: 8080
    datacallprocessor:
      install: true
      port: 8080
      servicename: data-call-processor-service
      targetport: 8080
    etl:
      httpservicename: nifi-http-service
      install: false
      port: 8080
      servicename: nifi-service
      targetport: 8080
      zkcsservicename: zk-cs-service
      zkhsservicename: zk-hs-service
    hdsconfigmap: hds-configmap
    hdssecret: hds-secret
    insurancedatamanager:
      install: true
      port: 8080
      servicename: insurance-data-manager-service
      targetport: 8080
    mongodb:
      install: true
    mongoexpress:
      install: true
    ui:
      install: true
      servicename: ui-service
    upload:
      install: true
      port: 80
      servicename: upload-service
      targetport: 80
  image:
    pullPolicy: IfNotPresent
    repository: openidl/data-call-app
    tag: latest
  imagePullSecrets: []
  ingress:
    annotations:
      kubernetes.io/ingress.class: public-iks-k8s-nginx
    enabled: false
    hosts:
    - host: openidl.local
      paths: []
    tls: []
  nameOverride: ""
  nodeSelector: {}
  podAnnotations: {}
  podSecurityContext: {}
  replicaCount: 1
  resources: {}
  secrets:
  - file: local-appid-config.json
    name: appid
  - file: local-certmanager-config.json
    name: certmanager
  - file: local-mongo-config.json
    name: mongodb
  - file: local-cloudant-config.json
    name: cloudantdb
  - file: connection-profile.json
    name: connectionprofile
  - file: channel-config.json
    name: channelconfigaais
  - file: DBConfig.json
    name: db-config
  securityContext: {}
  service:
    port: 8080
    targetport: 8080
    type: ClusterIP
  serviceAccount:
    annotations: {}
    create: false
    name: ""
  tolerations: []
openidl-data-call-processor:
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 100
    minReplicas: 1
    targetCPUUtilizationPercentage: 80
  fullnameOverride: ""
  global:
    appsecret: apps-secret
    clusterurl: aais.test.io
    datacallapp:
      install: true
      port: 8080
      servicename: data-call-app-service
      targetport: 8080
    datacallprocessor:
      install: true
      port: 8080
      servicename: data-call-processor-service
      targetport: 8080
    etl:
      httpservicename: nifi-http-service
      install: false
      port: 8080
      servicename: nifi-service
      targetport: 8080
      zkcsservicename: zk-cs-service
      zkhsservicename: zk-hs-service
    hdsconfigmap: hds-configmap
    hdssecret: hds-secret
    insurancedatamanager:
      install: true
      port: 8080
      servicename: insurance-data-manager-service
      targetport: 8080
    mongodb:
      install: true
    mongoexpress:
      install: true
    ui:
      install: true
      servicename: ui-service
    upload:
      install: true
      port: 80
      servicename: upload-service
      targetport: 80
  image:
    pullPolicy: IfNotPresent
    repository: openidl/data-call-processor
    tag: latest
  imagePullSecrets: []
  ingress:
    annotations:
      kubernetes.io/ingress.class: public-iks-k8s-nginx
    enabled: false
    hosts:
    - host: openidl.local
      paths: []
    tls: []
  nameOverride: ""
  nodeSelector: {}
  podAnnotations: {}
  podSecurityContext: {}
  replicaCount: 1
  resources: {}
  secrets:
  - file: local-certmanager-config.json
    name: certmanager
  - file: local-mongo-config.json
    name: mongodb
  - file: local-cloudant-config.json
    name: cloudantdb
  - file: connection-profile.json
    name: connectionprofile
  - file: DBConfig.json
    name: db-config
  - file: email.json
    name: email
  - file: listener-channel-config.json
    name: listenerchannelaais
  - file: target-channel-config.json
    name: targetchannelaais
  - file: s3-bucket-config.json
    name: s3bucket
  - file: unique-identifiers-config.json
    name: uniqueidentifiersaais
  securityContext: {}
  service:
    port: 8080
    targetPort: 8084
    type: ClusterIP
  serviceAccount:
    annotations: {}
    create: false
    name: ""
  tolerations: []
openidl-data-etl:
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 100
    minReplicas: 1
    targetCPUUtilizationPercentage: 80
  fullnameOverride: ""
  global:
    appsecret: apps-secret
    clusterurl: aais.test.io
    datacallapp:
      install: true
      port: 8080
      servicename: data-call-app-service
      targetport: 8080
    datacallprocessor:
      install: true
      port: 8080
      servicename: data-call-processor-service
      targetport: 8080
    etl:
      httpservicename: nifi-http-service
      install: false
      port: 8080
      servicename: nifi-service
      targetport: 8080
      zkcsservicename: zk-cs-service
      zkhsservicename: zk-hs-service
    hdsconfigmap: hds-configmap
    hdssecret: hds-secret
    insurancedatamanager:
      install: true
      port: 8080
      servicename: insurance-data-manager-service
      targetport: 8080
    mongodb:
      install: true
    mongoexpress:
      install: true
    ui:
      install: true
      servicename: ui-service
    upload:
      install: true
      port: 80
      servicename: upload-service
      targetport: 80
  image:
    pullPolicy: IfNotPresent
    repository: nginx
    tag: ""
  imagePullSecrets: []
  ingress:
    annotations: {}
    enabled: false
    hosts:
    - host: chart-example.local
      paths: []
    tls: []
  nameOverride: ""
  nodeSelector: {}
  podAnnotations: {}
  podSecurityContext: {}
  replicaCount: 1
  resources: {}
  secrets:
  - file: /template/flowConfig.json
    name: nifi
  securityContext: {}
  service:
    port: 80
    type: ClusterIP
  serviceAccount:
    annotations: {}
    create: true
    name: ""
  tolerations: []
openidl-hds:
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 100
    minReplicas: 1
    targetCPUUtilizationPercentage: 80
  fullnameOverride: ""
  global:
    appsecret: apps-secret
    clusterurl: aais.test.io
    datacallapp:
      install: true
      port: 8080
      servicename: data-call-app-service
      targetport: 8080
    datacallprocessor:
      install: true
      port: 8080
      servicename: data-call-processor-service
      targetport: 8080
    etl:
      httpservicename: nifi-http-service
      install: false
      port: 8080
      servicename: nifi-service
      targetport: 8080
      zkcsservicename: zk-cs-service
      zkhsservicename: zk-hs-service
    hdsconfigmap: hds-configmap
    hdssecret: hds-secret
    insurancedatamanager:
      install: true
      port: 8080
      servicename: insurance-data-manager-service
      targetport: 8080
    mongodb:
      install: true
    mongoexpress:
      install: true
    ui:
      install: true
      servicename: ui-service
    upload:
      install: true
      port: 80
      servicename: upload-service
      targetport: 80
  image:
    pullPolicy: IfNotPresent
    repository: nginx
    tag: ""
  imagePullSecrets: []
  ingress:
    annotations: {}
    enabled: false
    hosts:
    - host: chart-example.local
      paths: []
    tls: []
  mongo:
    servicename: mongodb-service
  nameOverride: ""
  nodeSelector: {}
  podAnnotations: {}
  podSecurityContext: {}
  replicaCount: 1
  resources: {}
  securityContext: {}
  service:
    port: 80
    type: ClusterIP
  serviceAccount:
    annotations: {}
    create: true
    name: ""
  tolerations: []
openidl-insurance-data-manager:
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 100
    minReplicas: 1
    targetCPUUtilizationPercentage: 80
  fullnameOverride: ""
  global:
    appsecret: apps-secret
    clusterurl: aais.test.io
    datacallapp:
      install: true
      port: 8080
      servicename: data-call-app-service
      targetport: 8080
    datacallprocessor:
      install: true
      port: 8080
      servicename: data-call-processor-service
      targetport: 8080
    etl:
      httpservicename: nifi-http-service
      install: false
      port: 8080
      servicename: nifi-service
      targetport: 8080
      zkcsservicename: zk-cs-service
      zkhsservicename: zk-hs-service
    hdsconfigmap: hds-configmap
    hdssecret: hds-secret
    insurancedatamanager:
      install: true
      port: 8080
      servicename: insurance-data-manager-service
      targetport: 8080
    mongodb:
      install: true
    mongoexpress:
      install: true
    ui:
      install: true
      servicename: ui-service
    upload:
      install: true
      port: 80
      servicename: upload-service
      targetport: 80
  image:
    pullPolicy: IfNotPresent
    repository: openidl/insurance-data-manager
    tag: latest
  imagePullSecrets: []
  ingress:
    enabled: true
    tls: []
  nameOverride: ""
  nodeSelector: {}
  podAnnotations: {}
  podSecurityContext: {}
  replicaCount: 1
  resources: {}
  secrets:
  - file: local-appid-config.json
    name: appid
  - file: local-certmanager-config.json
    name: certmanager
  - file: local-mongo-config.json
    name: mongodb
  - file: local-cloudant-config.json
    name: cloudantdb
  - file: connection-profile.json
    name: connectionprofile
  - file: channel-config.json
    name: channelconfigaais
  - file: DBConfig.json
    name: db-config
  - file: email.json
    name: email
  securityContext: {}
  service:
    port: 8080
    targetPort: 8083
    type: ClusterIP
  serviceAccount:
    annotations: {}
    create: true
    name: ""
  tolerations: []
openidl-secrets:
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 100
    minReplicas: 1
    targetCPUUtilizationPercentage: 80
  fullnameOverride: ""
  global:
    appsecret: apps-secret
    clusterurl: aais.test.io
    datacallapp:
      install: true
      port: 8080
      servicename: data-call-app-service
      targetport: 8080
    datacallprocessor:
      install: true
      port: 8080
      servicename: data-call-processor-service
      targetport: 8080
    etl:
      httpservicename: nifi-http-service
      install: false
      port: 8080
      servicename: nifi-service
      targetport: 8080
      zkcsservicename: zk-cs-service
      zkhsservicename: zk-hs-service
    hdsconfigmap: hds-configmap
    hdssecret: hds-secret
    insurancedatamanager:
      install: true
      port: 8080
      servicename: insurance-data-manager-service
      targetport: 8080
    mongodb:
      install: true
    mongoexpress:
      install: true
    ui:
      install: true
      servicename: ui-service
    upload:
      install: true
      port: 80
      servicename: upload-service
      targetport: 80
  image:
    pullPolicy: IfNotPresent
    repository: nginx
    tag: ""
  imagePullSecrets: []
  ingress:
    annotations: {}
    enabled: false
    hosts:
    - host: chart-example.local
      paths: []
    tls: []
  nameOverride: ""
  nodeSelector: {}
  podAnnotations: {}
  podSecurityContext: {}
  replicaCount: 1
  resources: {}
  secrets:
  - file: config/local-appid-config.json
    name: appid
    namespace: default
  - file: config/local-certmanager-config.json
    name: certmanager
    namespace: default
  - file: config/local-mongo-config.json
    name: mongodb
    namespace: default
  - file: config/local-cloudant-config.json
    name: cloudantdb
    namespace: default
  - file: config/connection-profile.json
    name: connectionprofile
    namespace: default
  - file: config/channel-config.json
    name: channelconfigaais
    namespace: default
  - file: config/DBConfig.json
    name: db-config
    namespace: default
  - file: config/email.json
    name: email
    namespace: default
  - file: config/listener-channel-config.json
    name: listenerchannelaais
    namespace: default
  - file: config/s3-bucket-config.json
    name: s3bucket
    namespace: default
  - file: config/target-channel-config.json
    name: targetchannelaais
    namespace: default
  - file: config/unique-identifiers-config.json
    name: uniqueidentifiersaais
    namespace: default
  - file: config/nifi-flowconfig.json
    name: nifi
    namespace: nifi
  securityContext: {}
  service:
    port: 80
    type: ClusterIP
  serviceAccount:
    annotations: {}
    create: true
    name: ""
  tolerations: []
openidl-ui:
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 100
    minReplicas: 1
    targetCPUUtilizationPercentage: 80
  fullnameOverride: ""
  global:
    appsecret: apps-secret
    clusterurl: aais.test.io
    datacallapp:
      install: true
      port: 8080
      servicename: data-call-app-service
      targetport: 8080
    datacallprocessor:
      install: true
      port: 8080
      servicename: data-call-processor-service
      targetport: 8080
    etl:
      httpservicename: nifi-http-service
      install: false
      port: 8080
      servicename: nifi-service
      targetport: 8080
      zkcsservicename: zk-cs-service
      zkhsservicename: zk-hs-service
    hdsconfigmap: hds-configmap
    hdssecret: hds-secret
    insurancedatamanager:
      install: true
      port: 8080
      servicename: insurance-data-manager-service
      targetport: 8080
    mongodb:
      install: true
    mongoexpress:
      install: true
    ui:
      install: true
      servicename: ui-service
    upload:
      install: true
      port: 80
      servicename: upload-service
      targetport: 80
  image:
    pullPolicy: IfNotPresent
    repository: openidl/ui
    tag: latest
  imagePullSecrets: []
  ingress:
    annotations: {}
    enabled: false
    hosts:
    - host: chart-example.local
      paths: []
    tls: []
  nameOverride: ""
  nodeSelector: {}
  podAnnotations: {}
  podSecurityContext: {}
  replicaCount: 1
  resources: {}
  secrets:
  - file: local-appid-config.json
    name: appid
  securityContext: {}
  service:
    port: 8080
    targetPort: 8080
    type: ClusterIP
  serviceAccount:
    annotations: {}
    create: true
    name: ""
  tolerations: []
openidl-upload:
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 100
    minReplicas: 1
    targetCPUUtilizationPercentage: 80
  fullnameOverride: ""
  global:
    appsecret: apps-secret
    clusterurl: aais.test.io
    datacallapp:
      install: true
      port: 8080
      servicename: data-call-app-service
      targetport: 8080
    datacallprocessor:
      install: true
      port: 8080
      servicename: data-call-processor-service
      targetport: 8080
    etl:
      httpservicename: nifi-http-service
      install: false
      port: 8080
      servicename: nifi-service
      targetport: 8080
      zkcsservicename: zk-cs-service
      zkhsservicename: zk-hs-service
    hdsconfigmap: hds-configmap
    hdssecret: hds-secret
    insurancedatamanager:
      install: true
      port: 8080
      servicename: insurance-data-manager-service
      targetport: 8080
    mongodb:
      install: true
    mongoexpress:
      install: true
    ui:
      install: true
      servicename: ui-service
    upload:
      install: true
      port: 80
      servicename: upload-service
      targetport: 80
  image:
    pullPolicy: IfNotPresent
    repository: openidl/upload
    tag: latest
  imagePullSecrets: []
  ingress:
    annotations: {}
    enabled: false
    hosts:
    - host: chart-example.local
      paths: []
    tls: []
  nameOverride: ""
  nodeSelector: {}
  podAnnotations: {}
  podSecurityContext: {}
  replicaCount: 2
  resources: {}
  secrets:
  - file: local-appid-config.json
    name: appid
  securityContext: {}
  service:
    port: 8080
    targetPort: 8085
    type: NodePort
  serviceAccount:
    annotations: {}
    create: true
    name: ""
  tolerations: []
replicaCount: 1

HOOKS:
---
# Source: openidl-k8s/charts/openidl-data-call-app/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "local-aais-openidl-data-call-app-test-connection"
  labels:
    helm.sh/chart: openidl-data-call-app-0.1.0
    app.kubernetes.io/name: openidl-data-call-app
    app.kubernetes.io/instance: local-aais
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['local-aais-openidl-data-call-app:8080']
  restartPolicy: Never
---
# Source: openidl-k8s/charts/openidl-data-call-processor/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "local-aais-openidl-data-call-processor-test-connection"
  labels:
    helm.sh/chart: openidl-data-call-processor-0.1.0
    app.kubernetes.io/name: openidl-data-call-processor
    app.kubernetes.io/instance: local-aais
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['local-aais-openidl-data-call-processor:8080']
  restartPolicy: Never
---
# Source: openidl-k8s/charts/openidl-data-etl/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "local-aais-openidl-data-etl-test-connection"
  labels:
    helm.sh/chart: openidl-data-etl-0.1.1
    app.kubernetes.io/name: openidl-data-etl
    app.kubernetes.io/instance: local-aais
    app.kubernetes.io/version: "0.1.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['local-aais-openidl-data-etl:80']
  restartPolicy: Never
---
# Source: openidl-k8s/charts/openidl-hds/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "local-aais-openidl-hds-test-connection"
  labels:
    helm.sh/chart: openidl-hds-0.1.0
    app.kubernetes.io/name: openidl-hds
    app.kubernetes.io/instance: local-aais
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['local-aais-openidl-hds:80']
  restartPolicy: Never
---
# Source: openidl-k8s/charts/openidl-insurance-data-manager/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "local-aais-openidl-insurance-data-manager-test-connection"
  labels:
    helm.sh/chart: openidl-insurance-data-manager-0.1.0
    app.kubernetes.io/name: openidl-insurance-data-manager
    app.kubernetes.io/instance: local-aais
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['local-aais-openidl-insurance-data-manager:8080']
  restartPolicy: Never
---
# Source: openidl-k8s/charts/openidl-secrets/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "local-aais-openidl-secrets-test-connection"
  labels:
    helm.sh/chart: openidl-secrets-0.1.0
    app.kubernetes.io/name: openidl-secrets
    app.kubernetes.io/instance: local-aais
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['local-aais-openidl-secrets:80']
  restartPolicy: Never
---
# Source: openidl-k8s/charts/openidl-ui/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "local-aais-openidl-ui-test-connection"
  labels:
    helm.sh/chart: openidl-ui-0.1.0
    app.kubernetes.io/name: openidl-ui
    app.kubernetes.io/instance: local-aais
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['local-aais-openidl-ui:8080']
  restartPolicy: Never
MANIFEST:
---
# Source: openidl-k8s/charts/openidl-data-etl/templates/namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: nifi
---
# Source: openidl-k8s/charts/openidl-hds/templates/hds-secret.yml
apiVersion: v1
kind: Secret
metadata:
  name: hds-secret
type: Opaque
data:
  mongo-root-username: dXNlcm5hbWU=
  mongo-root-password: cGFzc3dvcmQ=
---
# Source: openidl-k8s/charts/openidl-secrets/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: apps-secret
data:
    appid: |-
      ewogICJhcGlrZXkiOiAiMHJhd1d1VVBWbE1MaGNYTUNqbHlCNkJJNFJSNG5uLWRzSXVqX215RHJxcFEiLAogICJhcHBpZFNlcnZpY2VFbmRwb2ludCI6ICJodHRwczovL3VzLWVhc3QuYXBwaWQuY2xvdWQuaWJtLmNvbSIsCiAgImNsaWVudElkIjogIjdhZDYzMmQ4LWFiZGMtNDQ4ZC04MDI5LTkxZWVhYzBhZTY0ZSIsCiAgImRpc2NvdmVyeUVuZHBvaW50IjogImh0dHBzOi8vdXMtZWFzdC5hcHBpZC5jbG91ZC5pYm0uY29tL29hdXRoL3Y0L2QwNjQ5YTE5LWNmNjQtNGUzNi04OTdiLTAzMzhjZjg5ZmU5Mi8ud2VsbC1rbm93bi9vcGVuaWQtY29uZmlndXJhdGlvbiIsCiAgImlhbV9hcGlrZXlfZGVzY3JpcHRpb24iOiAiQXV0by1nZW5lcmF0ZWQgZm9yIGtleSA3YWQ2MzJkOC1hYmRjLTQ0OGQtODAyOS05MWVlYWMwYWU2NGUiLAogICJpYW1fYXBpa2V5X25hbWUiOiAic3RhZ2UtYWFpcy1BcHBJRC1TZXJ2aWNlS2V5IiwKICAiaWFtX3JvbGVfY3JuIjogImNybjp2MTpibHVlbWl4OnB1YmxpYzppYW06Ojo6c2VydmljZVJvbGU6TWFuYWdlciIsCiAgImlhbV9zZXJ2aWNlaWRfY3JuIjogImNybjp2MTpibHVlbWl4OnB1YmxpYzppYW0taWRlbnRpdHk6OmEvMzYxYzgwYWVlY2Q0NDQxMmIyM2E3ZjFiYzRhZTU4MGY6OnNlcnZpY2VpZDpTZXJ2aWNlSWQtYTU1YjE5ZGUtMTNiNy00MjllLWJkODEtMDE1MGM0ZTk4ZWZhIiwKICAibWFuYWdlbWVudFVybCI6ICJodHRwczovL3VzLWVhc3QuYXBwaWQuY2xvdWQuaWJtLmNvbS9tYW5hZ2VtZW50L3Y0L2QwNjQ5YTE5LWNmNjQtNGUzNi04OTdiLTAzMzhjZjg5ZmU5MiIsCiAgIm9hdXRoU2VydmVyVXJsIjogImh0dHBzOi8vdXMtZWFzdC5hcHBpZC5jbG91ZC5pYm0uY29tL29hdXRoL3Y0L2QwNjQ5YTE5LWNmNjQtNGUzNi04OTdiLTAzMzhjZjg5ZmU5MiIsCiAgInByb2ZpbGVzVXJsIjogImh0dHBzOi8vdXMtZWFzdC5hcHBpZC5jbG91ZC5pYm0uY29tIiwKICAic2VjcmV0IjogIlpHUmlaVFpqTTJVdE1tUXlOUzAwTnpVNExXSTBOakV0T0Roak5EWmxNRE0yWkROaSIsCiAgInRlbmFudElkIjogImQwNjQ5YTE5LWNmNjQtNGUzNi04OTdiLTAzMzhjZjg5ZmU5MiIsCiAgInZlcnNpb24iOiA0LAogICJjYWxsZXJJZCI6ICI3YWQ2MzJkOC1hYmRjLTQ0OGQtODAyOS05MWVlYWMwYWU2NGUiCn0=
    certmanager: |-
      ewogICAgImFwaWtleSI6ICJUZDFzOWhPVXQ3MTRQWVdxdktyWHYyblJyUjVyR1B1OFhhZ2V3VVAzdm5EXyIsCiAgICAiaW5zdGFuY2VfaWQiOiAiY3JuOnYxOmJsdWVtaXg6cHVibGljOmNsb3VkY2VydHM6dXMtZWFzdDphLzM2MWM4MGFlZWNkNDQ0MTJiMjNhN2YxYmM0YWU1ODBmOmE5ODNmNDlkLTQ3N2YtNDFmOC05ODg3LTVkY2ZmMzQwMjc4MDo6Igp9
    mongodb: |-
      
    cloudantdb: |-
      ewogICJhcGlrZXkiOiAiTnN5bVljVjByWUpoOGxjazJUdW5RR01TMjVJb0p3WFVWQi1MNnJydmR5algiLAogICJob3N0IjogImUyNTg1NzM5LTc0YTgtNGQ0Yy1hMzM1LTZmZjdmZDZhOGZjYS1ibHVlbWl4LmNsb3VkYW50bm9zcWxkYi5hcHBkb21haW4uY2xvdWQiLAogICJpYW1fYXBpa2V5X2Rlc2NyaXB0aW9uIjogIkF1dG8tZ2VuZXJhdGVkIGZvciBrZXkgMjMyZTU1NzQtYmViNS00MDQ3LWI1NzYtZTgxZDc3Y2Y5NDNiIiwKICAiaWFtX2FwaWtleV9uYW1lIjogIlNlcnZpY2UgY3JlZGVudGlhbHMtMiIsCiAgImlhbV9yb2xlX2NybiI6ICJjcm46djE6Ymx1ZW1peDpwdWJsaWM6aWFtOjo6OnNlcnZpY2VSb2xlOk1hbmFnZXIiLAogICJpYW1fc2VydmljZWlkX2NybiI6ICJjcm46djE6Ymx1ZW1peDpwdWJsaWM6aWFtLWlkZW50aXR5OjphLzM2MWM4MGFlZWNkNDQ0MTJiMjNhN2YxYmM0YWU1ODBmOjpzZXJ2aWNlaWQ6U2VydmljZUlkLWQ3YTJmYmExLWJjNTYtNGExMi1hYmZjLTNmODdlODU0N2RiMSIsCiAgInBhc3N3b3JkIjogIjNhZTM5NDg0Y2NkOTJlOGIyOGY3OTA5ZTI2ZjM3YzEzNmU3MjA0M2MxMGQ0NGE4NTI5ZjAwZWRhZTEyMmE2ZWIiLAogICJwb3J0IjogNDQzLAogICJ1cmwiOiAiaHR0cHM6Ly9lMjU4NTczOS03NGE4LTRkNGMtYTMzNS02ZmY3ZmQ2YThmY2EtYmx1ZW1peDozYWUzOTQ4NGNjZDkyZThiMjhmNzkwOWUyNmYzN2MxMzZlNzIwNDNjMTBkNDRhODUyOWYwMGVkYWUxMjJhNmViQGUyNTg1NzM5LTc0YTgtNGQ0Yy1hMzM1LTZmZjdmZDZhOGZjYS1ibHVlbWl4LmNsb3VkYW50bm9zcWxkYi5hcHBkb21haW4uY2xvdWQiLAogICJ1c2VybmFtZSI6ICJlMjU4NTczOS03NGE4LTRkNGMtYTMzNS02ZmY3ZmQ2YThmY2EtYmx1ZW1peCIKfQ==
    connectionprofile: |-
      ewogICAgIm5hbWUiOiAiYWFpc21zcHByb2ZpbGUiLAogICAgImRlc2NyaXB0aW9uIjogIk5ldHdvcmsgb24gSUJQIHYyIC0gc2V0dXAgZm9yIHN0YWdlIGFhaXMgbm9kZSIsCiAgICAidmVyc2lvbiI6ICIxLjAuMCIsCiAgICAiY2xpZW50IjogewogICAgICAgICJvcmdhbml6YXRpb24iOiAiYWFpc21zcCIKICAgIH0sCiAgICAib3JnYW5pemF0aW9ucyI6IHsKICAgICAgICAiYWFpc21zcCI6IHsKICAgICAgICAgICAgIm1zcGlkIjogImFhaXNtc3AiLAogICAgICAgICAgICAiY2VydGlmaWNhdGVBdXRob3JpdGllcyI6IFsKICAgICAgICAgICAgICAgICJuNzYzMGM3LWFhaXNjYS5zdGFnZS1hYWlzLWlicC1jbHN0ci05M2ZiYzk0MjczNGEyZmY2YjA5OTE2NThkNTg5YjU0ZS0wMDAwLnVzLWVhc3QuY29udGFpbmVycy5hcHBkb21haW4uY2xvdWQ6NzA1NCIKICAgICAgICAgICAgXSwKICAgICAgICAgICAgInBlZXJzIjogWwogICAgICAgICAgICAgICAgIm43NjMwYzctYWFpc3BlZXIuc3RhZ2UtYWFpcy1pYnAtY2xzdHItOTNmYmM5NDI3MzRhMmZmNmIwOTkxNjU4ZDU4OWI1NGUtMDAwMC51cy1lYXN0LmNvbnRhaW5lcnMuYXBwZG9tYWluLmNsb3VkOjcwNTEiCiAgICAgICAgICAgIF0KICAgICAgICB9CiAgICB9LAogICAgInBlZXJzIjogewogICAgICAgICJuNzYzMGM3LWFhaXNwZWVyLnN0YWdlLWFhaXMtaWJwLWNsc3RyLTkzZmJjOTQyNzM0YTJmZjZiMDk5MTY1OGQ1ODliNTRlLTAwMDAudXMtZWFzdC5jb250YWluZXJzLmFwcGRvbWFpbi5jbG91ZDo3MDUxIjogewogICAgICAgICAgICAidXJsIjogImdycGNzOi8vbjc2MzBjNy1hYWlzcGVlci5zdGFnZS1hYWlzLWlicC1jbHN0ci05M2ZiYzk0MjczNGEyZmY2YjA5OTE2NThkNTg5YjU0ZS0wMDAwLnVzLWVhc3QuY29udGFpbmVycy5hcHBkb21haW4uY2xvdWQ6NzA1MSIsCiAgICAgICAgICAgICJ0bHNDQUNlcnRzIjogewogICAgICAgICAgICAgICAgInBlbSI6ICItLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS1cbk1JSUNERENDQWJLZ0F3SUJBZ0lVS3Z6TUh1cG5EY3FhWDByY3dKUjlOeHZLRVpvd0NnWUlLb1pJemowRUF3SXdcblpERUxNQWtHQTFVRUJoTUNWVk14RnpBVkJnTlZCQWdURGs1dmNuUm9JRU5oY205c2FXNWhNUlF3RWdZRFZRUUtcbkV3dEllWEJsY214bFpHZGxjakVQTUEwR0ExVUVDeE1HUm1GaWNtbGpNUlV3RXdZRFZRUURFd3hoWVdselkyRXRcbmRHeHpZMkV3SGhjTk1qQXhNakl6TVRneU1qQXdXaGNOTXpVeE1qSXdNVGd5TWpBd1dqQmtNUXN3Q1FZRFZRUUdcbkV3SlZVekVYTUJVR0ExVUVDQk1PVG05eWRHZ2dRMkZ5YjJ4cGJtRXhGREFTQmdOVkJBb1RDMGg1Y0dWeWJHVmtcbloyVnlNUTh3RFFZRFZRUUxFd1pHWVdKeWFXTXhGVEFUQmdOVkJBTVRER0ZoYVhOallTMTBiSE5qWVRCWk1CTUdcbkJ5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCTDUxUzlYRFJuQU9WZitnVjFyNlJsWFBtMDlzOXpKSmJkWUFcbjhidmZWVWJTelZOYk04QjlWSUprM3lreGM0WW5qajZ6bVIxVkEyMzJSazJKU0l4T21NK2pRakJBTUE0R0ExVWRcbkR3RUIvd1FFQXdJQkJqQVBCZ05WSFJNQkFmOEVCVEFEQVFIL01CMEdBMVVkRGdRV0JCU1dKTkE4bjdycTgxWFhcbm5kamx5aUZoQ3ZYNlFUQUtCZ2dxaGtqT1BRUURBZ05JQURCRkFpRUFtcWtXR093UWFJTmZ0S3BHWjRWN0NkbWNcbkFyQ1BLQm5Id0owaVJhd2R0K2tDSUJMdFYzOHZGRWErZFBDVGhDdmlocEtqaWpHTTcrZUQydmNxMHdiZG9Pbmpcbi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS1cbiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImdycGNPcHRpb25zIjogewogICAgICAgICAgICAgICAgInNzbC10YXJnZXQtbmFtZS1vdmVycmlkZSI6ICJuNzYzMGM3LWFhaXNwZWVyLnN0YWdlLWFhaXMtaWJwLWNsc3RyLTkzZmJjOTQyNzM0YTJmZjZiMDk5MTY1OGQ1ODliNTRlLTAwMDAudXMtZWFzdC5jb250YWluZXJzLmFwcGRvbWFpbi5jbG91ZCIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0sCiAgICAiY2VydGlmaWNhdGVBdXRob3JpdGllcyI6IHsKICAgICAgICAibjc2MzBjNy1hYWlzY2Euc3RhZ2UtYWFpcy1pYnAtY2xzdHItOTNmYmM5NDI3MzRhMmZmNmIwOTkxNjU4ZDU4OWI1NGUtMDAwMC51cy1lYXN0LmNvbnRhaW5lcnMuYXBwZG9tYWluLmNsb3VkOjcwNTQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9uNzYzMGM3LWFhaXNjYS5zdGFnZS1hYWlzLWlicC1jbHN0ci05M2ZiYzk0MjczNGEyZmY2YjA5OTE2NThkNTg5YjU0ZS0wMDAwLnVzLWVhc3QuY29udGFpbmVycy5hcHBkb21haW4uY2xvdWQ6NzA1NCIsCiAgICAgICAgICAgICJjYU5hbWUiOiAiY2EiLAogICAgICAgICAgICAidGxzQ0FDZXJ0cyI6IHsKICAgICAgICAgICAgICAgICJwZW0iOiBbCiAgICAgICAgICAgICAgICAgICAgIi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLVxuTUlJRGtEQ0NBemFnQXdJQkFnSVFUUVBnR3lqcFFsWWhoNDVPZFJMd3REQUtCZ2dxaGtqT1BRUURBakNCMFRFTFxuTUFrR0ExVUVCaE1DVlZNeEZ6QVZCZ05WQkFnVERrNXZjblJvSUVOaGNtOXNhVzVoTVE4d0RRWURWUVFIRXdaRVxuZFhKb1lXMHhEREFLQmdOVkJBb1RBMGxDVFRFVE1CRUdBMVVFQ3hNS1FteHZZMnRqYUdGcGJqRjFNSE1HQTFVRVxuQXhOc2JqYzJNekJqTnkxaFlXbHpZMkV1YzNSaFoyVXRZV0ZwY3kxcFluQXRZMnh6ZEhJdE9UTm1ZbU01TkRJM1xuTXpSaE1tWm1ObUl3T1RreE5qVTRaRFU0T1dJMU5HVXRNREF3TUM1MWN5MWxZWE4wTG1OdmJuUmhhVzVsY25NdVxuWVhCd1pHOXRZV2x1TG1Oc2IzVmtNQjRYRFRJd01USXlNekU0TWpZMU9Wb1hEVE13TVRJeU1URTRNalkxT1Zvd1xuZ2RFeEN6QUpCZ05WQkFZVEFsVlRNUmN3RlFZRFZRUUlFdzVPYjNKMGFDQkRZWEp2YkdsdVlURVBNQTBHQTFVRVxuQnhNR1JIVnlhR0Z0TVF3d0NnWURWUVFLRXdOSlFrMHhFekFSQmdOVkJBc1RDa0pzYjJOclkyaGhhVzR4ZFRCelxuQmdOVkJBTVRiRzQzTmpNd1l6Y3RZV0ZwYzJOaExuTjBZV2RsTFdGaGFYTXRhV0p3TFdOc2MzUnlMVGt6Wm1KalxuT1RReU56TTBZVEptWmpaaU1EazVNVFkxT0dRMU9EbGlOVFJsTFRBd01EQXVkWE10WldGemRDNWpiMjUwWVdsdVxuWlhKekxtRndjR1J2YldGcGJpNWpiRzkxWkRCWk1CTUdCeXFHU000OUFnRUdDQ3FHU000OUF3RUhBMElBQkp4MFxucGVIcVFZQ0VPMHhUU1BHNjRsS2NoalNKTkV6aTJ4MkxYRGVqYUpIUE9RZmZPNmx0c2JLRHdQbjVFeVk2V3pvTVxuajFOeGNuL0FCdDZEZ093TjQyQ2pnZTB3Z2Vvd2dlY0dBMVVkRVFTQjN6Q0IzSUpzYmpjMk16QmpOeTFoWVdselxuWTJFdWMzUmhaMlV0WVdGcGN5MXBZbkF0WTJ4emRISXRPVE5tWW1NNU5ESTNNelJoTW1abU5tSXdPVGt4TmpVNFxuWkRVNE9XSTFOR1V0TURBd01DNTFjeTFsWVhOMExtTnZiblJoYVc1bGNuTXVZWEJ3Wkc5dFlXbHVMbU5zYjNWa1xuZ214dU56WXpNR00zTFdGaGFYTmpZUzV6ZEdGblpTMWhZV2x6TFdsaWNDMWpiSE4wY2kwNU0yWmlZemswTWpjelxuTkdFeVptWTJZakE1T1RFMk5UaGtOVGc1WWpVMFpTMHdNREF3TG5WekxXVmhjM1F1WTI5dWRHRnBibVZ5Y3k1aFxuY0hCa2IyMWhhVzR1WTJ4dmRXUXdDZ1lJS29aSXpqMEVBd0lEU0FBd1JRSWhBTUFTdXBzaFpKdWtJYXFnQjJ6T1xuVXJzK2pGbnlCQ1Mxb0Y1WXFvcE5JQWhyQWlBd3crcVJvMDl0S1B1MW9lZ2ROVG41MFVCMGFzLzVrTjg3ZU1DMVxua2p0SkhBPT1cbi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS1cbiIKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQ==
    channelconfigaais: |-
      ewogICAgImNoYW5uZWxzIjogWwogICAgICAgIHsKICAgICAgICAgICAgImNoYW5uZWxOYW1lIjogImRlZmF1bHRjaGFubmVsIiwKICAgICAgICAgICAgImNoYWluY29kZU5hbWUiOiAib3BlbmlkbC1jYy1kZWZhdWx0IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgICAiY2hhbm5lbE5hbWUiOiAiYW5hbHl0aWNzLWFhaXMiLAogICAgICAgICAgICAiY2hhaW5jb2RlTmFtZSI6ICJvcGVuaWRsLWNjLWFhaXMtY2FycmllcnMiCiAgICAgICAgfQogICAgXSwKICAgICJ1c2VycyI6IFsKICAgICAgICB7CiAgICAgICAgICAgICJvcmciOiAiYWFpc21zcCIsCiAgICAgICAgICAgICJ1c2VyIjogIm9wZW5pZGwtYWFpcy1kYXRhLWNhbGwtYXBwLWlicC0yLjAiLAogICAgICAgICAgICAibXNwSWQiOiAiYWFpc21zcCIKICAgICAgICB9CiAgICBdLAogICAgImNyb3NzQ2hhbm5lbFF1ZXJ5UGFyYW0iOiBbCiAgICAgICAgewogICAgICAgICAgICAiY2hhbm5lbE5hbWUiOiAiYW5hbHl0aWNzLWFhaXMiLAogICAgICAgICAgICAiY2hhaW5jb2RlTmFtZSI6ICJvcGVuaWRsLWNjLWFhaXMtY2FycmllcnMiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAgICJjaGFubmVsTmFtZSI6ICJhbmFseXRpY3MtdHJ2IiwKICAgICAgICAgICAgImNoYWluY29kZU5hbWUiOiAib3BlbmlkbC1jYy1hYWlzLWNhcnJpZXJzIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgICAiY2hhbm5lbE5hbWUiOiAiYW5hbHl0aWNzLWhpZyIsCiAgICAgICAgICAgICJjaGFpbmNvZGVOYW1lIjogIm9wZW5pZGwtY2MtYWFpcy1jYXJyaWVycyIKICAgICAgICB9CiAgICBdCn0=
    dbconfig: |-
      ew0KICAgICJwZXJzaXN0ZW50U3RvcmUiOiJtb25nbyIsDQogICAgImRhdGFiYXNlU2VydmljZSI6IFt7DQogICAgICAgICJuYW1lIjogIm1vbmdvIiwNCiAgICAgICAgIm1vbmdvZGIiOiJvcGVuaWRsLW9mZmNoYWluLWRiIiAsDQogICAgICAgICJzZXJ2aWNlY3JlZGVudGlhbHMiOiAib2ZmLWNoYWluLWRiLWNyZWRlbnRpYWxzLW1vbmdvIiwNCiAgICAgICAgInNpbXBsZVVSSSI6Im1vbmdvZGI6Ly9tb25nb2RiLXNlcnZpY2U6MjcwMTciDQogICAgfSwNCiAgICB7DQogICAgICAgICJuYW1lIjogImNsb3VkYW50IiwNCiAgICAgICAgInNlcnZpY2VjcmVkZW50aWFscyI6ICJvZmYtY2hhaW4tZGItY3JlZGVudGlhbHMiDQogICAgfV0NCn0=
    email: |-
      ewogICAgIkNvbmZpZyIgOiBbCiAgICAgICAgewogICAgICAgICAgICAic2VydmljZSI6IkFQSURPV04iLAogICAgICAgICAgICAiZnJvbWVtYWlsYWRkcmVzcyI6ImFuZHltQGFhaXNvbmxpbmUuY29tIiwKICAgICAgICAgICAgInRvZW1haWxhZGRyZXNzIiA6IFsiYW5uYkBhYWlzb25saW5lLmNvbSIsImFuZHltQGFhaXNvbmxpbmUuY29tIiwia2Vuc0BhYWlzb25saW5lLmNvbSJdLAogICAgICAgICAgICAiZW1haWxzdWJqZWN0IiA6ICJCbG9ja2NoYWluIEFQSSBpcyBEb3duIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgICAic2VydmljZSI6IkRCRE9XTiIsCiAgICAgICAgICAgICJmcm9tZW1haWxhZGRyZXNzIjoiYW5keW1AYWFpc29ubGluZS5jb20iLAogICAgICAgICAgICAidG9lbWFpbGFkZHJlc3MiIDogWyJhbm5iQGFhaXNvbmxpbmUuY29tIiwiYW5keW1AYWFpc29ubGluZS5jb20iLCJrZW5zQGFhaXNvbmxpbmUuY29tIl0sCiAgICAgICAgICAgICJlbWFpbHN1YmplY3QiIDogIk1vbmdvIFNlcnZpY2UgaXMgRG93biIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICAgInNlcnZpY2UiOiJEQkVYRUNFUlJPUiIsCiAgICAgICAgICAgICJmcm9tZW1haWxhZGRyZXNzIjoiYW5keW1AYWFpc29ubGluZS5jb20iLAogICAgICAgICAgICAidG9lbWFpbGFkZHJlc3MiIDogWyJhbm5iQGFhaXNvbmxpbmUuY29tIiwiYW5keW1AYWFpc29ubGluZS5jb20iLCJrZW5zQGFhaXNvbmxpbmUuY29tIl0sCiAgICAgICAgICAgICJlbWFpbHN1YmplY3QiIDogIkRhdGEgTG9hZCBmb3IgPDxCQVRDSElEPj4gLSBNb25nbyBEYXRhYmFzZSBFcnJvciIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICAgInNlcnZpY2UiOiJCQ0VSUk9SIiwKICAgICAgICAgICAgImZyb21lbWFpbGFkZHJlc3MiOiJhbmR5bUBhYWlzb25saW5lLmNvbSIsCiAgICAgICAgICAgICJ0b2VtYWlsYWRkcmVzcyIgOiBbImFubmJAYWFpc29ubGluZS5jb20iLCJhbmR5bUBhYWlzb25saW5lLmNvbSIsImtlbnNAYWFpc29ubGluZS5jb20iXSwKICAgICAgICAgICAgImVtYWlsc3ViamVjdCIgOiAiQmxvY2tjaGFpbiBIYXNoIGZhaWxlZCIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICAgInNlcnZpY2UiOiJEQVRBTE9BREZBSUxVUkUiLAogICAgICAgICAgICAiZnJvbWVtYWlsYWRkcmVzcyI6ImFuZHltQGFhaXNvbmxpbmUuY29tIiwKICAgICAgICAgICAgInRvZW1haWxhZGRyZXNzIiA6IFsiYW5uYkBhYWlzb25saW5lLmNvbSIsImFuZHltQGFhaXNvbmxpbmUuY29tIiwia2Vuc0BhYWlzb25saW5lLmNvbSJdLAogICAgICAgICAgICAiZW1haWxzdWJqZWN0IiA6ICJEYXRhIExvYWQgZm9yIDw8QkFUQ0hJRD4+IEZhaWx1cmUgIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgICAic2VydmljZSI6IklOUFVURklMRUZPUk1BVCIsCiAgICAgICAgICAgICJmcm9tZW1haWxhZGRyZXNzIjoiYW5keW1AYWFpc29ubGluZS5jb20iLAogICAgICAgICAgICAidG9lbWFpbGFkZHJlc3MiIDogWyJhbm5iQGFhaXNvbmxpbmUuY29tIiwiYW5keW1AYWFpc29ubGluZS5jb20iLCJrZW5zQGFhaXNvbmxpbmUuY29tIl0sCiAgICAgICAgICAgICJlbWFpbHN1YmplY3QiIDogIkRhdGEgTG9hZCAtIElucHV0IGZpbGUgZm9ybWF0IGlzIGluY29ycmVjdCIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICAgInNlcnZpY2UiOiJEQkxPR0ZBSUxVUkUiLAogICAgICAgICAgICAiZnJvbWVtYWlsYWRkcmVzcyI6ImFuZHltQGFhaXNvbmxpbmUuY29tIiwKICAgICAgICAgICAgInRvZW1haWxhZGRyZXNzIiA6IFsiYW5uYkBhYWlzb25saW5lLmNvbSIsImFuZHltQGFhaXNvbmxpbmUuY29tIiwia2Vuc0BhYWlzb25saW5lLmNvbSJdLAogICAgICAgICAgICAiZW1haWxzdWJqZWN0IiA6ICJEYXRhIExvYWQgTG9nIEZhaWx1cmUgLSA8PEJBVENISUQ+PiIKIAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgICAic2VydmljZSI6IkRBVEFMT0FEU1VDQ0VTUyIsCiAgICAgICAgICAgICJmcm9tZW1haWxhZGRyZXNzIjoiYW5keW1AYWFpc29ubGluZS5jb20iLAogICAgICAgICAgICAidG9lbWFpbGFkZHJlc3MiIDogWyJhbmR5bUBhYWlzb25saW5lLmNvbSIsImFubmJAYWFpc29ubGluZS5jb20iLCJrZW5zQGFhaXNvbmxpbmUuY29tIl0sCiAgICAgICAgICAgICJlbWFpbHN1YmplY3QiIDogIkRhdGEgTG9hZGVkIFN1Y2Nlc3NmdWxseSIKCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAgICJzZXJ2aWNlIjoiR0VORVJBVEVUT0tFTkZBSUxVUkUiLAogICAgICAgICAgICAiZnJvbWVtYWlsYWRkcmVzcyI6ImFuZHltQGFhaXNvbmxpbmUuY29tIiwKICAgICAgICAgICAgInRvZW1haWxhZGRyZXNzIiA6IFsiYW5keW1AYWFpc29ubGluZS5jb20iLCJhbm5iQGFhaXNvbmxpbmUuY29tIiwia2Vuc0BhYWlzb25saW5lLmNvbSJdLAogICAgICAgICAgICAiZW1haWxzdWJqZWN0IiA6ICJHZW5lcmF0ZSBUb2tlbiBGYWlsdXJlIgoKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICAgInNlcnZpY2UiOiJHRU5FUkFURVRPS0VOU1VDQ0VTUyIsCiAgICAgICAgICAgICJmcm9tZW1haWxhZGRyZXNzIjoiYW5keW1AYWFpc29ubGluZS5jb20iLAogICAgICAgICAgICAidG9lbWFpbGFkZHJlc3MiIDogWyJhbmR5bUBhYWlzb25saW5lLmNvbSIsImFubmJAYWFpc29ubGluZS5jb20iLCJrZW5zQGFhaXNvbmxpbmUuY29tIl0sCiAgICAgICAgICAgICJlbWFpbHN1YmplY3QiIDogIkdlbmVyYXRlIFRva2VuIFN1Y2Nlc3MiCgogICAgICAgIH0KICAgIF0KfQ==
    listenerchannelaais: |-
      ew0KICAgICJsaXN0ZW5lckNoYW5uZWxzIjogW3sNCiAgICAgICAgICAgICJjaGFubmVsTmFtZSI6ICJhbmFseXRpY3MtYWFpcyIsDQogICAgICAgICAgICAiZXZlbnRzIjogW3sNCiAgICAgICAgICAgICAgICAgICAgIkNvbnNlbnRlZEV2ZW50IjogIkNvbnNlbnRlZEV2ZW50Ig0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIF0NCg0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgICAiY2hhbm5lbE5hbWUiOiAiZGVmYXVsdGNoYW5uZWwiLA0KICAgICAgICAgICAgImV2ZW50cyI6IFsNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICJFeHRyYWN0aW9uUGF0dGVyblNwZWNpZmllZCI6ICJFeHRyYWN0aW9uUGF0dGVyblNwZWNpZmllZCINCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICBdDQogICAgICAgIH0NCiAgICBdLA0KICAgICJpZGVudGl0eSI6IHsNCiAgICAgICAgInVzZXIiOiAib3BlbmlkbC1hYWlzLWRhdGEtY2FsbC1wcm9jZXNzb3ItaWJwLTIuMCIsDQogICAgICAgICJ3YWxsZXQiOiAiJndhbGxldCINCiAgICB9LA0KICAgICJhcHBsaWNhdGlvbk5hbWUiOiAib3BlbmlkbC1kYXRhLWNhbGwtcHJvY2Vzc29yIg0KfQ==
    s3bucket: |-
      ewogICAgImFjY2Vzc0tleUlkIjogIkFLSUFYWE1BSVRZSUNGUU42NVdOIiwKICAgICJzZWNyZXRBY2Nlc3NLZXkiOiAiY0tPY2tEMGp5Z2JJdzZxWlF1cllUdlA5VEhFa056YTVFUjJ6Q3ZuZyIsCiAgICAiYnVja2V0TmFtZSI6ICJvcGVuaWRsLWFuYWx5dGljcyIKfQ==
    targetchannelaais: |-
      ew0KICAgICJ0YXJnZXRDaGFubmVscyI6IFsNCiAgICAgICAgew0KICAgICAgICAgICAgImNoYW5uZWxOYW1lIjogImFuYWx5dGljcy1hYWlzIiwNCiAgICAgICAgICAgICJjaGFpbmNvZGVOYW1lIjogIm9wZW5pZGwtY2MtYWFpcy1jYXJyaWVycyINCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICAgImNoYW5uZWxOYW1lIjogImRlZmF1bHRjaGFubmVsIiwNCiAgICAgICAgICAgICJjaGFpbmNvZGVOYW1lIjogIm9wZW5pZGwtY2MtZGVmYXVsdCINCiAgICAgICAgfQ0KICAgIF0sDQogICAgInVzZXJzIjogWw0KICAgICAgICB7DQogICAgICAgICAgICAib3JnIjogImFhaXNtc3AiLA0KICAgICAgICAgICAgInVzZXIiOiAib3BlbmlkbC1hYWlzLWRhdGEtY2FsbC1wcm9jZXNzb3ItaWJwLTIuMCIsDQogICAgICAgICAgICAibXNwSWQiOiAiYWFpc21zcCINCiAgICAgICAgfQ0KICAgIF0NCn0=
    uniqueidentifiersaais: |-
---
# Source: openidl-k8s/charts/openidl-secrets/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: apps-secret
  namespace: nifi
data:
    nifi: |-
      eyAgCiAgICAiYXBpS2V5IjoiYXBpa2V5PUJCWThOZTRTODFHdWZVbGxVQ0UtRkljX3dzM29oT0dROWlBRTVGb2VoNHZzJnJlc3BvbnNlX3R5cGU9Y2xvdWRfaWFtJmdyYW50X3R5cGU9dXJuOmlibTpwYXJhbXM6b2F1dGg6Z3JhbnQtdHlwZTphcGlrZXkiLAogICAgImlibS1zZXJ2aWNlLWluc3RhbmNlLWlkIjoiY3JuOnYxOmJsdWVtaXg6cHVibGljOmNsb3VkLW9iamVjdC1zdG9yYWdlOmdsb2JhbDphLzM2MWM4MGFlZWNkNDQ0MTJiMjNhN2YxYmM0YWU1ODBmOmY3MmY3ODFmLTYzMmQtNDUwMy05MGY3LTI0NzI3YzU4NjkwNTo6IiwKICAgICJ0b2tlblVSTCI6Imh0dHBzOi8vaWFtLmNsb3VkLmlibS5jb20vaWRlbnRpdHkvdG9rZW4iLAogICAgImJ1Y2tldFVSTCI6Imh0dHBzOi8vczMuYW1zMDMuY2xvdWQtb2JqZWN0LXN0b3JhZ2UuYXBwZG9tYWluLmNsb3VkIiwKICAgImNsaWVudElkIjogImNsaWVudF9pZD03YWQ2MzJkOC1hYmRjLTQ0OGQtODAyOS05MWVlYWMwYWU2NGUiLAogICAidGVuYW50SWQiOiAiZWRhMWY1YWMtNTFlZC00NTQ0LTlhODktY2EyNzAwMTZhMmY1IiwKICAgInNlY3JldCI6ICJjbGllbnRfc2VjcmV0PVpHUmlaVFpqTTJVdE1tUXlOUzAwTnpVNExXSTBOakV0T0Roak5EWmxNRE0yWkROaSIsCiAgICJuYW1lIjogIm9wZW5pZGwtaW5zdXJhbmNlLWRhdGEtbWFuYWdlci1hcHAiLAogICAib0F1dGhTZXJ2ZXJVcmwiOiAiaHR0cHM6Ly91cy1lYXN0LmFwcGlkLmNsb3VkLmlibS5jb20vb2F1dGgvdjQvZDA2NDlhMTktY2Y2NC00ZTM2LTg5N2ItMDMzOGNmODlmZTkyL3Rva2VuIiwKICAgImxvYWRNb25nb0RiQVBJIiA6ICJodHRwczovL29wZW5pZGwtaW5zdXJhbmNlLWRhdGEtbWFuYWdlci5zdGFnZS1hYWlzLWFwcHMtY2xzdHItOTNmYmM5NDI3MzRhMmZmNmIwOTkxNjU4ZDU4OWI1NGUtMDAwMC51cy1lYXN0LmNvbnRhaW5lcnMuYXBwZG9tYWluLmNsb3VkL29wZW5pZGwvYXBpL2xvYWQtaW5zdXJhbmNlLWRhdGEiLAogICAibG9hZE1vbmdvRGJBUEllcnIiIDogImh0dHBzOi8vb3BlbmlkbC1pbnN1cmFuY2UtZGF0YS1tYW5hZ2VyLnN0YWdlLWFhaXMtYXBwcy1jbHN0ci05M2ZiYzk0MjczNGEyZmY2YjA5OTE2NThkNTg5YjU0ZS0wMDAwLnVzLWVhc3QuY29udGFpbmVycy5hcHBkb21haW4uY2xvdWQvb3BlbmlkbC9hcGkvaW5zLWRhdGEtaGRzLWVyciIsCiAgICJsb2FkQmxvY2tDaGFpbkhBU0giIDogImh0dHBzOi8vb3BlbmlkbC1pbnN1cmFuY2UtZGF0YS1tYW5hZ2VyLnN0YWdlLWFhaXMtYXBwcy1jbHN0ci05M2ZiYzk0MjczNGEyZmY2YjA5OTE2NThkNTg5YjU0ZS0wMDAwLnVzLWVhc3QuY29udGFpbmVycy5hcHBkb21haW4uY2xvdWQvb3BlbmlkbC9hcGkvaW5zLWRhdGEtaGFzaCIsCiAgICJidWNrZXROYW1lIiA6ICJvcGVuaWRsLXN0YWdlLWFhaXMtYnVja2V0IiwKICAgImdyYW5kVHlwZSIgOiAiZ3JhbnRfdHlwZT1jbGllbnRfY3JlZGVudGlhbHMiLAogICAgImNhcnJpZXJJRCI6ICIwMDAwMiIsCiAgICAicmVqZWN0UGVyY2VudCI6NTAsCiAgICAibG9iTGlzdCI6ICIxNiwzMSwzMiwzMywzNCwzNiwzNyw0MSw0Miw0NSw0Nyw0OSw1NSw1NiIsCiAgICAiYWNjb3VudGluZ01vbnRoIjogIjAxLDAyLDAzLDA0LDA1LDA2LDA3LDA4LDA5LDEwLDExLDEyIiwKICAgICJ0cmFuc2FjdGlvbkNvZGUiOiIxLDIsMyw0LDUsNiw3LDgsOSIsCiAgICAibW9uZ29EQk5hbWUiOiAib3BlbmlkbC1vZmZjaGFpbi1kYiIsCiAgICAibW9uZ29Db2xsZWN0aW9uTmFtZSI6ICJ2YWxpZHJlY29yZHMiLAogICAgIm1vbmdvSW52YWxpZFJlY29yZENvbGxlY3Rpb24iOiJpbnZhbGlkcmVjb3JkcyIsCiAgICAic2NyaXB0X3BhdGgiOiIvb3B0L25pZmkvbmlmaS1jdXJyZW50L2JpbiIsCiAgICAiZXJyb3Jfc2NyaXB0IjogImVycm9yaGFuZGxpbmcucHkiLAogICAgInB5dGhvbl9Nb2R1bGVEaXJlY3RvcnkiOiJweXRob246L3Vzci9sb2NhbC9iaW4vcHl0aG9uIiwKICAgICJkYXRhX3BhdGgiIDogIi9vcHQvbmlmaS9uaWZpLWN1cnJlbnQvZGF0YSIsCiAgICAiZW5yaWNobWVudF9zY3JpcHQiOiJFbnJpY2htZW50LnB5IiwKICAgICJyZWZlcmVuY2VGaWxlIjogIi9vcHQvbmlmaS9uaWZpLWN1cnJlbnQvZGF0YS9hYWlzSG9tZW93bmVyc1JlZmVyZW5jZURhdGEuY3N2IiwKICAgICJnZXRMb2FkUHJvY2Vzc29yIiA6ICJodHRwczovL2Rldi1vcGVuaWRsLWFhaXMtbmlmaS1jLTkzZmJjOTQyNzM0YTJmZjZiMDk5MTY1OGQ1ODliNTRlLTAwMDAudXMtc291dGguY29udGFpbmVycy5hcHBkb21haW4uY2xvdWQvbmlmaS1hcGkvcHJvY2Vzc29ycy9mN2M3MjI4Ny03MTU0LTMwMjctN2QyYS1mNTNlNDEzNmEwNzciLAogICAgInB1dExvYWRQcm9jZXNzb3IiIDogImh0dHBzOi8vZGV2LW9wZW5pZGwtYWFpcy1uaWZpLWMtOTNmYmM5NDI3MzRhMmZmNmIwOTkxNjU4ZDU4OWI1NGUtMDAwMC51cy1zb3V0aC5jb250YWluZXJzLmFwcGRvbWFpbi5jbG91ZC9uaWZpLWFwaS9wcm9jZXNzb3JzL2Y3YzcyMjg3LTcxNTQtMzAyNy03ZDJhLWY1M2U0MTM2YTA3Ny9ydW4tc3RhdHVzIgogIH0KICA=
---
# Source: openidl-k8s/charts/openidl-hds/templates/hds-configmap.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hds-configmap
data:
  database_url: mongodb-service
---
# Source: openidl-k8s/charts/openidl-data-call-app/templates/service.yml
apiVersion: v1
kind: Service
metadata:
  name: data-call-app-service
  labels:
    helm.sh/chart: openidl-data-call-app-0.1.0
    app.kubernetes.io/name: openidl-data-call-app
    app.kubernetes.io/instance: local-aais
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: openidl-data-call-app
    app.kubernetes.io/instance: local-aais
---
# Source: openidl-k8s/charts/openidl-data-call-processor/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: data-call-processor-service
  labels:
    helm.sh/chart: openidl-data-call-processor-0.1.0
    app.kubernetes.io/name: openidl-data-call-processor
    app.kubernetes.io/instance: local-aais
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: openidl-data-call-processor
    app.kubernetes.io/instance: local-aais
---
# Source: openidl-k8s/charts/openidl-hds/templates/mongo-express-service.yml
apiVersion: v1
kind: Service
metadata:
  name: mongo-express-service
spec:
  selector:
    app: mongo-express
  type: LoadBalancer
  ports:
    - protocol: TCP
      port: 8081
      targetPort: 8081
      nodePort: 30000
---
# Source: openidl-k8s/charts/openidl-hds/templates/mongo-service.yml
apiVersion: v1
kind: Service
metadata:
  name: mongodb-service
spec:
  selector:
    app: mongodb
  ports:
    - protocol: TCP
      port: 27017
      targetPort: 27017
---
# Source: openidl-k8s/charts/openidl-insurance-data-manager/templates/service.yml
apiVersion: v1
kind: Service
metadata:
  name: insurance-data-manager-service
  labels:
    helm.sh/chart: openidl-insurance-data-manager-0.1.0
    app.kubernetes.io/name: openidl-insurance-data-manager
    app.kubernetes.io/instance: local-aais
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: openidl-insurance-data-manager
    app.kubernetes.io/instance: local-aais
---
# Source: openidl-k8s/charts/openidl-ui/templates/service.yml
apiVersion: v1
kind: Service
metadata:
  name: ui-service
  labels:
    helm.sh/chart: openidl-ui-0.1.0
    app.kubernetes.io/name: openidl-ui
    app.kubernetes.io/instance: local-aais
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: openidl-ui
    app.kubernetes.io/instance: local-aais
---
# Source: openidl-k8s/charts/openidl-upload/templates/service.yml
apiVersion: v1
kind: Service
metadata:
  name: upload-service
  labels:
    helm.sh/chart: openidl-upload-0.1.0
    app.kubernetes.io/name: openidl-upload
    app.kubernetes.io/instance: local-aais
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: NodePort
  ports:
    - port: 80
      targetPort: 80
      nodePort: 
      protocol: TCP
      name: http
  selector:
    app: openidl-upload
---
# Source: openidl-k8s/charts/openidl-data-call-app/templates/deployment.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: local-aais-openidl-data-call-app
  labels:
    helm.sh/chart: openidl-data-call-app-0.1.0
    app.kubernetes.io/name: openidl-data-call-app
    app.kubernetes.io/instance: local-aais
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: openidl-data-call-app
      app.kubernetes.io/instance: local-aais
  template:
    metadata:
      labels:
        app.kubernetes.io/name: openidl-data-call-app
        app.kubernetes.io/instance: local-aais
    spec:
      #
      volumes:
      - name: apkey
        secret:
          secretName: apps-secret
      containers:
      - name: openidl-data-call-app
        # for regular deployment
        # image: aais:1
        # for local development against minikube registry
        image: openidl/data-call-app:latest
        imagePullPolicy: IfNotPresent      
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: apkey
          mountPath: /server/config/local-appid-config.json
          subPath: appid
        - name: apkey
          mountPath: /server/config/local-certmanager-config.json
          subPath: certmanager
        - name: apkey
          mountPath: /server/config/local-mongo-config.json
          subPath: mongodb
        - name: apkey
          mountPath: /server/config/local-cloudant-config.json
          subPath: cloudantdb
        - name: apkey
          mountPath: /server/config/connection-profile.json
          subPath: connectionprofile
        - name: apkey
          mountPath: /server/config/channel-config.json
          subPath: channelconfigaais
        - name: apkey
          mountPath: /server/config/DBConfig.json
          subPath: dbconfig
---
# Source: openidl-k8s/charts/openidl-data-call-processor/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: local-aais-openidl-data-call-processor
  labels:
    helm.sh/chart: openidl-data-call-processor-0.1.0
    app.kubernetes.io/name: openidl-data-call-processor
    app.kubernetes.io/instance: local-aais
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: openidl-data-call-processor
      app.kubernetes.io/instance: local-aais
  template:
    metadata:
      labels:
        app.kubernetes.io/name: openidl-data-call-processor
        app.kubernetes.io/instance: local-aais
    spec:
      #
      volumes:
      - name: apkey
        secret:
          secretName: apps-secret
      containers:
      - name: openidl-data-call-processor
        # for regular deployment
        # image: aais:1
        # for local development against minikube registry
        image: openidl/data-call-processor:latest
        imagePullPolicy: IfNotPresent      
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: apkey
          mountPath: /server/config/local-certmanager-config.json
          subPath: certmanager
        - name: apkey
          mountPath: /server/config/local-mongo-config.json
          subPath: mongodb
        - name: apkey
          mountPath: /server/config/local-cloudant-config.json
          subPath: cloudantdb
        - name: apkey
          mountPath: /server/config/connection-profile.json
          subPath: connectionprofile
        - name: apkey
          mountPath: /server/config/DBConfig.json
          subPath: dbconfig
        - name: apkey
          mountPath: /server/config/email.json
          subPath: email
        - name: apkey
          mountPath: /server/config/listener-channel-config.json
          subPath: listenerchannelaais
        - name: apkey
          mountPath: /server/config/target-channel-config.json
          subPath: targetchannelaais
        - name: apkey
          mountPath: /server/config/s3-bucket-config.json
          subPath: s3bucket
        - name: apkey
          mountPath: /server/config/unique-identifiers-config.json
          subPath: uniqueidentifiersaais
---
# Source: openidl-k8s/charts/openidl-hds/templates/mongo-express.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo-express
  labels:
    app: mongo-express
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo-express
  template:
    metadata:
      labels:
        app: mongo-express
    spec:
      containers:
      - name: mongo-express
        image: mongo-express
        ports:
        - containerPort: 8080
        env:
        - name: ME_CONFIG_MONGODB_ADMINUSERNAME
          valueFrom: 
            secretKeyRef:
              name: hds-secret
              key: mongo-root-username
        - name: ME_CONFIG_MONGODB_ADMINPASSWORD
          valueFrom:
            secretKeyRef:
              name: hds-secret
              key: mongo-root-password
        - name: ME_CONFIG_MONGODB_SERVER
          valueFrom:
            configMapKeyRef:
              name: hds-configmap
              key: database_url
---
# Source: openidl-k8s/charts/openidl-hds/templates/mongo.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb-deployment
  labels:
    app: mongodb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
        - name: mongodb
          image: mongo
          ports:
          - containerPort: 27017
---
# Source: openidl-k8s/charts/openidl-insurance-data-manager/templates/deployment.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: local-aais-openidl-insurance-data-manager
  labels:
    helm.sh/chart: openidl-insurance-data-manager-0.1.0
    app.kubernetes.io/name: openidl-insurance-data-manager
    app.kubernetes.io/instance: local-aais
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: openidl-insurance-data-manager
      app.kubernetes.io/instance: local-aais
  template:
    metadata:
      labels:
        app.kubernetes.io/name: openidl-insurance-data-manager
        app.kubernetes.io/instance: local-aais
    spec:
      #
      volumes:
      - name: apkey
        secret:
          secretName: apps-secret
      containers:
      - name: openidl-insurance-data-manager
        # for regular deployment
        # image: aais:1
        # for local development against minikube registry
        image: openidl/insurance-data-manager:latest
        imagePullPolicy: IfNotPresent      
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: apkey
          mountPath: /server/config/local-appid-config.json
          subPath: appid
        - name: apkey
          mountPath: /server/config/local-certmanager-config.json
          subPath: certmanager
        - name: apkey
          mountPath: /server/config/local-mongo-config.json
          subPath: mongodb
        - name: apkey
          mountPath: /server/config/local-cloudant-config.json
          subPath: cloudantdb
        - name: apkey
          mountPath: /server/config/connection-profile.json
          subPath: connectionprofile
        - name: apkey
          mountPath: /server/config/channel-config.json
          subPath: channelconfigaais
        - name: apkey
          mountPath: /server/config/DBConfig.json
          subPath: dbconfig
        - name: apkey
          mountPath: /server/config/email.json
          subPath: email
---
# Source: openidl-k8s/charts/openidl-ui/templates/deployment.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: openidl-ui
  labels:
    helm.sh/chart: openidl-ui-0.1.0
    app.kubernetes.io/name: openidl-ui
    app.kubernetes.io/instance: local-aais
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: openidl-ui
      app.kubernetes.io/instance: local-aais
  template:
    metadata:
      labels:
        app.kubernetes.io/name: openidl-ui
        app.kubernetes.io/instance: local-aais
    spec:
      #
      volumes:
      - name: apkey
        secret:
          secretName: apps-secret
      containers:
      - name: openidl-ui
        # for regular deployment
        # image: aais:1
        # for local development against minikube registry
        image: openidl/ui:latest
        imagePullPolicy: IfNotPresent      
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: apkey
          mountPath: /server/config/local-appid-config.json
          subPath: appid
---
# Source: openidl-k8s/charts/openidl-upload/templates/deployment.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: openidl-upload
  labels:
    helm.sh/chart: openidl-upload-0.1.0
    app.kubernetes.io/name: openidl-upload
    app.kubernetes.io/instance: local-aais
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 2
  selector:
    matchLabels:
      app: openidl-upload
  template:
    metadata:
      labels:
        app: openidl-upload
    spec:
      #
      containers:
      - name: openidl-upload
        # for regular deployment
        # image: aais:1
        # for local development against minikube registry
        image: openidl/upload:latest
        imagePullPolicy: IfNotPresent      
        ports:
        - containerPort: 80
      restartPolicy: Always
---
# Source: openidl-k8s/charts/openidl-insurance-data-manager/templates/ingress.yml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: insurance-data-manager-ingress
  labels:
    helm.sh/chart: openidl-insurance-data-manager-0.1.0
    app.kubernetes.io/name: openidl-insurance-data-manager
    app.kubernetes.io/instance: local-aais
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  rules:
    - host: aais.test.io
      http:
        paths:
          - path: /insurance-data-manager
            backend:
              service:
                name: insurance-data-manager-service
                port: 
                  number: 8080

NOTES:
High level chart for all of openidl
