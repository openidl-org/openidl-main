{"map":"\nDROP FUNCTION IF EXISTS openidl_ep_1234.tmp_pa_basic_limit_il;\nDROP FUNCTION IF EXISTS openidl_ep_1234.tmp_pa_excess_limit_il;\nDROP FUNCTION IF EXISTS openidl_ep_1234.tmp_pa_car_years;\nDROP FUNCTION IF EXISTS openidl_ep_1234.tmp_pa_earned_premium;\nDROP FUNCTION IF EXISTS openidl_ep_1234.tmp_pa_auto_outstanding;\nDROP FUNCTION IF EXISTS openidl_ep_1234.tmp_pa_incurred_loss;\nDROP FUNCTION IF EXISTS openidl_ep_1234.tmp_pa_incurred_count;\nDROP TABLE IF EXISTS openidl_ep_1234.tmp_pa_coverage_ref;\nDROP TABLE IF EXISTS openidl_ep_1234.tmp_pa_coverage;\n    \n     \nCREATE TABLE openidl_ep_1234.tmp_pa_coverage as\nSELECT \n    CASE WHEN a.fk_transaction_code_id in (1,6) then 'Premium'\n        WHEN a.fk_transaction_code_id in (2,3,4,5) then  'Claim'\n        ELSE null end as record_type,\n        CONCAT('01-',a.accounting_month,'-',a.accounting_year)::date accounting_date,\n        a.fk_transaction_code_id,\n        a.fk_state_code_id,\n        a.policy_identifier,\n        a.occurrence_identifier,\n        a.months_covered,\n        a.fk_deductible_code_id,\n        a.fk_coverage_code_id,\n        a.exposure,\n        a.loss_amount,\n        CASE WHEN a.fk_transaction_code_id in (1,6) then round((a.premium_amount / a.months_covered)) end as monthly_premium_amount,\n        (CONCAT('01-',a.accounting_month,'-',a.accounting_year)::date + interval '1 month' * a.months_covered)::date accounting_term_expiration,\n        CASE WHEN a.fk_transaction_code_id in (2,3,4,5) THEN CONCAT('01-',a.accident_month,'-',a.accident_year)::date else null end as accident_date,\n        CASE\n          WHEN a.fk_coverage_code_id IN ( 1, 13, 26 ) THEN '1'\n          WHEN a.fk_coverage_code_id IN ( 2, 14, 27 ) THEN '2'\n          WHEN a.fk_coverage_code_id IN ( 3, 15, 28 ) THEN '3'\n          WHEN a.fk_coverage_code_id = 4 THEN '4'\n          WHEN a.fk_coverage_code_id IN ( 5, 16, 29 ) THEN '5'\n          WHEN a.fk_coverage_code_id IN ( 6, 17, 10, 21, 33, 11, 22, 34 ) THEN '6'\n          WHEN a.fk_coverage_code_id IN ( 7, 18, 30 ) AND a.fk_deductible_code_id = 1 THEN '7'\n          WHEN a.fk_coverage_code_id IN ( 8,19,31) AND a.fk_deductible_code_id = 1 THEN '8'\n          WHEN a.fk_coverage_code_id IN ( 12,35) AND a.fk_deductible_code_id = 1 THEN '8'\n          WHEN a.fk_coverage_code_id IN ( 7,18,30) AND a.fk_deductible_code_id = 3 THEN '9'\n          WHEN a.fk_coverage_code_id IN ( 8,19,31) AND a.fk_deductible_code_id = 3 THEN '10'\n          WHEN a.fk_coverage_code_id IN ( 12,35) AND a.fk_deductible_code_id = 3 THEN '10'       \n          WHEN a.fk_coverage_code_id IN (7,18,30) AND a.fk_deductible_code_id = 5 THEN '11'   \n          WHEN a.fk_coverage_code_id IN ( 8,19,31) AND a.fk_deductible_code_id = 5 THEN '12'\n          WHEN a.fk_coverage_code_id IN ( 12,35) AND a.fk_deductible_code_id = 5 THEN '12'     \n          WHEN a.fk_coverage_code_id IN ( 7,18,30) AND a.fk_deductible_code_id = 6 THEN '13'       \n          WHEN a.fk_coverage_code_id IN ( 8,19,31) AND a.fk_deductible_code_id = 6 THEN '14'\n          WHEN a.fk_coverage_code_id IN ( 12,35) AND a.fk_deductible_code_id = 6 THEN '14'      \n          WHEN a.fk_coverage_code_id IN (7,18,30) AND a.fk_deductible_code_id = 7 THEN '15'       \n          WHEN a.fk_coverage_code_id IN (8,19,31) AND a.fk_deductible_code_id = 7 THEN '16'\n          WHEN a.fk_coverage_code_id IN ( 12,35) AND a.fk_deductible_code_id = 7 THEN '16'       \n          WHEN a.fk_coverage_code_id IN ( 7,18,30) AND a.fk_deductible_code_id not in (1,3,5,6,7) THEN '17'\n          WHEN a.fk_coverage_code_id IN ( 8,19,31) AND a.fk_deductible_code_id not in (1,3,5,6,7) THEN '18'\n          WHEN a.fk_coverage_code_id IN ( 12,35) AND a.fk_deductible_code_id not in (1,3,5,6,7) THEN '18'\n          WHEN a.fk_coverage_code_id IN (9,20,32) AND a.fk_deductible_code_id = 7 THEN '16'\n          ELSE NULL\n        END AS reporting_code,\n        CASE\n          WHEN a.fk_coverage_code_id IN ( 1, 13, 26 ) THEN 'Bodily Injury'\n          WHEN a.fk_coverage_code_id IN ( 2, 14, 27 ) THEN 'Property Damage'\n          WHEN a.fk_coverage_code_id IN ( 3, 15, 28 ) THEN 'Single BI/PD Limit'\n          WHEN a.fk_coverage_code_id = 4 THEN 'PIP'\n          WHEN a.fk_coverage_code_id IN ( 5, 16, 29 ) THEN 'Medical Payments'\n          WHEN a.fk_coverage_code_id IN ( 6, 17, 10, 21,  33, 11, 22, 34 ) THEN 'Uninsured/Underinsured'\n          WHEN a.fk_coverage_code_id IN ( 7, 18, 30 ) AND a.fk_deductible_code_id = 1 THEN 'Phy Dam - Coll - Full'         \n          WHEN a.fk_coverage_code_id IN ( 8,19,31) AND a.fk_deductible_code_id = 1 THEN 'Phy Dam - Comp - Full'\n          WHEN a.fk_coverage_code_id IN ( 12,35) AND a.fk_deductible_code_id = 1 THEN 'Phy Dam - Comp - Full'  \n          WHEN a.fk_coverage_code_id IN ( 7,18,30) AND a.fk_deductible_code_id = 3 THEN 'Phy Dam - Coll - $100'\n          WHEN a.fk_coverage_code_id IN ( 8,19,31) AND a.fk_deductible_code_id = 3 THEN 'Phy Dam - Comp - $100'\n          WHEN a.fk_coverage_code_id IN ( 12,35) AND a.fk_deductible_code_id = 3 THEN 'Phy Dam - Comp - $100'\n          WHEN a.fk_coverage_code_id IN (7,18,30) AND a.fk_deductible_code_id = 5 THEN 'Phy Dam - Coll - $250'\n          WHEN a.fk_coverage_code_id IN ( 8,19,31) AND a.fk_deductible_code_id = 5 THEN 'Phy Dam - Comp - $250'\n          WHEN a.fk_coverage_code_id IN ( 12,35) AND a.fk_deductible_code_id = 5 THEN 'Phy Dam - Comp - $250'\n          WHEN a.fk_coverage_code_id IN ( 7,18,30) AND a.fk_deductible_code_id = 6 THEN 'Phy Dam - Coll - $500'         \n          WHEN a.fk_coverage_code_id IN ( 8,19,31) AND a.fk_deductible_code_id = 6 THEN 'Phy Dam - Comp - $500'\n          WHEN a.fk_coverage_code_id IN ( 12,35) AND a.fk_deductible_code_id = 6 THEN 'Phy Dam - Comp - $500'        \n          WHEN a.fk_coverage_code_id IN (7,18,30) AND a.fk_deductible_code_id = 7 THEN 'Phy Dam - Coll - $1000'      \n          WHEN a.fk_coverage_code_id IN (8,19,31) AND a.fk_deductible_code_id = 7 THEN 'Phy Dam - Comp - $1000'\n          WHEN a.fk_coverage_code_id IN ( 12,35) AND a.fk_deductible_code_id = 7 THEN 'Phy Dam - Comp - $1000'\n          WHEN a.fk_coverage_code_id IN ( 7,18,30) AND a.fk_deductible_code_id not in (1,3,5,6,7) THEN 'Phy Dam - Coll - ALL OTHER'        \n          WHEN a.fk_coverage_code_id IN ( 8,19,31) AND a.fk_deductible_code_id not in (1,3,5,6,7) THEN 'Phy Dam - Comp - ALL OTHER'       \n          WHEN a.fk_coverage_code_id IN ( 12,35) AND a.fk_deductible_code_id not in (1,3,5,6,7) THEN 'Phy Dam - Comp - ALL OTHER'\n          WHEN a.fk_coverage_code_id IN (9,20,32) AND a.fk_deductible_code_id = 7 THEN 'Bodily Injury'\n          ELSE NULL\n        END AS reporting_name\nFROM   openidl_base_1234.pa_stat_vw a,\n      openidl_base_1234.pa_coverage_code b\nWHERE  a.fk_coverage_code_id = b.id\nAND CONCAT('01-',a.accounting_month,'-',a.accounting_year)::date >= ' '::DATE\nAND CONCAT('01-',a.accounting_month,'-',a.accounting_year)::date <= '2020-01-01'::DATE;\n    \n     \nCREATE TABLE openidl_ep_1234.tmp_pa_coverage_ref as\n    SELECT reporting_code, reporting_name \n    FROM openidl_ep_1234.tmp_pa_coverage \n    WHERE reporting_code IS NOT NULL\n    GROUP BY reporting_code, reporting_name \n    ORDER BY reporting_code::numeric;\n\n     \nCREATE OR replace FUNCTION  openidl_ep_1234.tmp_pa_car_years(IN start_date date,IN end_date date, IN pv_reporting_code VARCHAR)\nreturns      numeric AS $$DECLARE cy numeric;\nBEGIN\n    SELECT sum(a.cy)\n    from (\n        (SELECT 1 ggroup,            \n            Datediff(accounting_date,accounting_term_expiration )/12*exposure cy\n            FROM     openidl_ep_1234.tmp_pa_coverage\n            WHERE  accounting_date >= start_date\n            AND accounting_term_expiration < end_date\n            AND fk_transaction_code_id in (1,8)\n            AND reporting_code = pv_reporting_code) \n        union all\n            (SELECT 2 ggroup,                                                                \n            Datediff(start_date, accounting_term_expiration)/12*exposure cy\n            FROM     openidl_ep_1234.tmp_pa_coverage\n            WHERE  accounting_date < start_date\n            AND accounting_term_expiration> start_date\n            AND accounting_term_expiration< end_date\n            AND fk_transaction_code_id in (1,8)\n            AND reporting_code = pv_reporting_code)\n        union all\n            (SELECT 3 ggroup,\n            Datediff(accounting_date, end_date)/12*exposure cy\n            FROM     openidl_ep_1234.tmp_pa_coverage\n            WHERE  accounting_date > start_date\n            AND accounting_date < end_date\n            AND accounting_term_expiration > end_date\n            AND fk_transaction_code_id in (1,8)\n            AND reporting_code = pv_reporting_code)\n        union all\n            (SELECT 4 ggroup,       \n            Datediff(start_date,end_date)/12*exposure cy\n            FROM     openidl_ep_1234.tmp_pa_coverage\n            WHERE  accounting_date < start_date\n            AND accounting_term_expiration > end_date\n            AND fk_transaction_code_id in (1,8)\n            AND reporting_code = pv_reporting_code)\n            ) a into cy;\n    RETURN cy;\nEND$$ language plpgsql;\n     \nCREATE OR REPLACE FUNCTION  openidl_ep_1234.tmp_pa_earned_premium(IN start_date date,IN end_date date, IN pv_reporting_code VARCHAR)\nRETURNS NUMERIC AS $$DECLARE ep numeric;\nBEGIN\n    SELECT sum(a.ep)\n    from (\n        (SELECT 1 ggroup,\n            Datediff(accounting_date,accounting_term_expiration) * monthly_premium_amount ep\n            FROM    openidl_ep_1234.tmp_pa_coverage\n            WHERE  accounting_date >= start_date\n            AND accounting_term_expiration < end_date\n            AND fk_transaction_code_id in (1,8)\n            AND reporting_code = pv_reporting_code) \n        union all \n            (SELECT 2 ggroup,                                                      \n            Datediff(accounting_date, end_date) * monthly_premium_amount  ep   \n            FROM    openidl_ep_1234.tmp_pa_coverage\n            WHERE  accounting_date < start_date\n            AND accounting_term_expiration> start_date\n            AND accounting_term_expiration< end_date\n            AND fk_transaction_code_id in (1,8)\n            AND reporting_code = pv_reporting_code\n            )\n        union all \n            (SELECT 3 ggroup,\n            Datediff(accounting_date, end_date) * monthly_premium_amount ep\n            FROM    openidl_ep_1234.tmp_pa_coverage\n            WHERE  accounting_date > start_date\n            AND accounting_date < end_date\n            AND accounting_term_expiration > end_date\n            AND fk_transaction_code_id in (1,8)\n            AND reporting_code = pv_reporting_code)\n        union all\n            (SELECT 4 ggroup,       \n            Datediff(start_date, end_date) *monthly_premium_amount ep\n            FROM    openidl_ep_1234.tmp_pa_coverage\n            WHERE  accounting_date < start_date\n            AND accounting_term_expiration > end_date\n            AND fk_transaction_code_id in (1,8)\n            AND reporting_code = pv_reporting_code)) a into ep;\n    RETURN ep;\nEND$$ language plpgsql;\n\n     \n\nCREATE OR replace FUNCTION openidl_ep_1234.tmp_pa_auto_outstanding(IN start_date date,IN end_date date, IN pv_coverage_code VARCHAR)\nRETURNS      numeric AS $$DECLARE ep numeric;\nBEGIN\nSELECT Sum(x.loss_amount) outstanding_loss\n    FROM  (SELECT t2.  reporting_code,\n                t2.occurrence_identifier,\n                Max(t2.loss_amount) loss_amount\n        FROM   (SELECT   reporting_code,\n                        occurrence_identifier,\n                        Max(accounting_date) accounting_date\n                FROM   openidl_ep_1234.tmp_pa_coverage\n                WHERE  fk_transaction_code_id = 3\n               AND   reporting_code = pv_coverage_code\n               AND accounting_date >= start_date\n               AND accounting_date <= end_date\n                GROUP  BY   reporting_code,\n                            occurrence_identifier) t,\n                openidl_ep_1234.tmp_pa_coverage t2\n        WHERE  t.  reporting_code = t2.  reporting_code\n               AND t.occurrence_identifier = t2.occurrence_identifier\n               AND t.accounting_date = t2.accounting_date\n        GROUP  BY t2.  reporting_code,\n                    t2.occurrence_identifier,\n                    t2.accounting_date) x into ep; \nRETURN ep;\nEND$$ language plpgsql;\n    \n     \n\nCREATE OR REPLACE FUNCTION openidl_ep_1234.tmp_pa_incurred_loss(IN start_date date,IN end_date date, IN  pv_reporting_code VARCHAR)\nRETURNS NUMERIC AS $$DECLARE ep NUMERIC;\nBEGIN\n    \n    SELECT SUM(loss_amount) loss_amount\n        FROM\n        ((SELECT SUM(loss_amount) loss_amount FROM openidl_ep_1234.tmp_pa_coverage\n        WHERE fk_transaction_code_id = 2\n        AND reporting_code =  pv_reporting_code\n        AND accident_date > start_date\n        AND accident_date < end_date\n        UNION\n        (SELECT openidl_ep_1234.tmp_pa_auto_outstanding(start_date, end_date,pv_reporting_code) loss_amount))) a into ep; \n    RETURN ep;\nEND$$ language plpgsql;\n    \n     \nCREATE OR REPLACE FUNCTION openidl_ep_1234.tmp_pa_incurred_count(IN start_date date,IN end_date date, IN pv_reporting_code VARCHAR)\nRETURNS NUMERIC AS $$DECLARE ep numeric;\nBEGIN\n    SELECT count(distinct(occurrence_identifier)) incurred_count \n    FROM openidl_ep_1234.tmp_pa_coverage\n    WHERE fk_transaction_code_id in (2,3,4,5)\n    AND reporting_code = pv_reporting_code\n    AND accident_date > start_date\n    AND accident_date < end_date into ep;\n    RETURN ep;\nEND$$ language plpgsql;\n    \n     \nCREATE OR replace FUNCTION openidl_ep_1234.tmp_pa_basic_limit_il(IN start_date date,IN end_date date, IN pv_reporting_code varchar)\nreturns numeric AS $$declare il numeric;BEGIN\nSELECT\nCASE\n       WHEN b.paid_loss + c.outstanding_loss >= 2500 THEN 2500\n       ELSE b.paid_loss + c.outstanding_loss\nEND AS basic_limit_il2\nFROM   (\n       SELECT Sum(a.loss_amount) paid_loss\n       FROM   openidl_ep_1234.tmp_pa_coverage a\n       WHERE  a.reporting_code = pv_reporting_code\n       AND    a.fk_transaction_code_id = 2\n       AND    a.accounting_date >= start_date\n       AND    a.accounting_date <= end_date) b,\n       ( SELECT openidl_ep_1234.tmp_pa_auto_outstanding(start_date, end_date,pv_reporting_code) outstanding_loss) c\n       INTO   il;\n\nRETURN il;\nend$$ language plpgsql;\n\n \nCREATE OR replace FUNCTION openidl_ep_1234.tmp_pa_excess_limit_il(IN start_date date,IN end_date date, IN pv_reporting_code varchar)\nRETURNS NUMERIC AS $$declare ex numeric;BEGIN\nSELECT\n        CASE\n            WHEN b.paid_loss + c.outstanding_loss <= 2500 THEN 0\n            ELSE (b.paid_loss + c.outstanding_loss) - 2500\n        END AS basic_limit_il2\nFROM   (\n            SELECT Sum(a.loss_amount) paid_loss\n            FROM   openidl_ep_1234.tmp_pa_coverage a\n            WHERE  a.reporting_code = pv_reporting_code\n            AND    a.fk_transaction_code_id = 2\n            AND    a.accounting_date >= start_date\n            AND    a.accounting_date <= end_date) b,\n        (\n            SELECT openidl_ep_1234.tmp_pa_auto_outstanding(start_date, end_date,pv_reporting_code) outstanding_loss) c\nINTO   ex;\n\nRETURN ex;\nend$$ language plpgsql;\n\n","reduce":"\nSELECT a.reporting_code,\n    a.reporting_name,\n    ROUND(openidl_ep_1234.tmp_pa_earned_premium(' ' :: DATE,'2020-01-01' :: DATE, a.reporting_code)) earned_premium,\n    ROUND(openidl_ep_1234.tmp_pa_car_years(' ' :: DATE, '2020-01-01' :: DATE, a.reporting_code)) car_years,\n    ROUND(openidl_ep_1234.tmp_pa_incurred_loss(' '::DATE, '2020-01-01'::DATE,a.reporting_code)) incurred_loss,\n    ROUND(openidl_ep_1234.tmp_pa_incurred_count(' '::DATE, '2020-01-01'::DATE,a.reporting_code)) incurred_count,\n    ROUND(openidl_ep_1234.tmp_pa_basic_limit_il(' '::DATE, '2020-01-01'::DATE,a.reporting_code)) basic_limit_il,\n    ROUND(openidl_ep_1234.tmp_pa_excess_limit_il(' '::DATE, '2020-01-01'::DATE,a.reporting_code)) excess_limit_il\nFROM   openidl_ep_1234.tmp_pa_coverage_ref a; \n\n    ","clean":"\nDROP FUNCTION IF EXISTS openidl_ep_1234.tmp_pa_basic_limit_il;\nDROP FUNCTION IF EXISTS openidl_ep_1234.tmp_pa_excess_limit_il;\nDROP FUNCTION IF EXISTS openidl_ep_1234.tmp_pa_car_years;\nDROP FUNCTION IF EXISTS openidl_ep_1234.tmp_pa_earned_premium;\nDROP FUNCTION IF EXISTS openidl_ep_1234.tmp_pa_auto_outstanding;\nDROP FUNCTION IF EXISTS openidl_ep_1234.tmp_pa_incurred_loss;\nDROP FUNCTION IF EXISTS openidl_ep_1234.tmp_pa_incurred_count;\nDROP TABLE IF EXISTS openidl_ep_1234.tmp_pa_coverage_ref;\nDROP TABLE IF EXISTS openidl_ep_1234.tmp_pa_coverage;\n    \n    "}